(* Generated by H2D v1.31.0 from jni.h. *)

<* +M2ADDTYPES   *>
<* +M2EXTENSIONS *>

DEFINITION MODULE ["StdCall"] JNI;

IMPORT SYSTEM;


TYPE
  UCHAR = SYSTEM.CARD16;

  va_list = POINTER TO CHAR; -- in fact to byte
  PCHAR   = POINTER TO CHAR;
  PUCHAR  = POINTER TO UCHAR;

TYPE 
  jint  = LONGINT;

  jlong = SYSTEM.INT64;

  jbyte = CHAR;

(*               *)
(*  * JNI Types  *)
(*               *)

  jboolean = SYSTEM.BOOL8;

  jchar = SYSTEM.CARD16;

  jshort = SYSTEM.INT16;

  jfloat = REAL;

  jdouble = LONGREAL;

  jsize = LONGINT;

  jobject = POINTER TO RECORD END;

  jclass = jobject;

  jinterface = jobject;

  jthrowable = jobject;

  jarray = jobject;

  jstring = POINTER TO RECORD END;

  jbooleanArray = jarray;

  jbyteArray = jarray;

  jcharArray = jarray;

  jshortArray = jarray;

  jintArray = jarray;

  jlongArray = jarray;

  jfloatArray = jarray;

  jdoubleArray = jarray;

  jobjectArray = jarray;

  jweak = jobject;

  jvalue = RECORD
    CASE : INTEGER OF
      |0: z: jboolean;
      |1: b: jbyte;
      |2: c: jchar;
      |3: s: jshort;
      |4: i: jint;
      |5: j: jlong;
      |6: f: jfloat;
      |7: d: jdouble;
      |8: l: jobject;
    END;
  END;


  jfieldID = SYSTEM.ADDRESS;
  (* this is either an object offset or address of a static field *)

  jmethodID = CARDINAL;
  (* this is either an number in method table or address of a static proc *)


(*                                               *)
(*  * possible return values for JNI functions.  *)
(*                                               *)


CONST 
  JNI_OK = 0;
  JNI_ERR = -1;

(*                                        *)
(*  * used in ReleaseScalarArrayElements  *)
(*                                        *)

CONST 
  JNI_COMMIT = 1;
  JNI_ABORT = 2;

(*                                                                        *)
(*  * used in RegisterNatives to describe native method name, signature,  *)
(*  * and function pointer.                                               *)
(*                                                                        *)

TYPE 
  JNINativeMethod = RECORD
    name      : PCHAR;
    signature : PCHAR;
    fnPtr     : SYSTEM.ADDRESS;
  END;

(*                                  *)
(*  * JNI Native Method Interface.  *)
(*                                  *)

  PJNIEnv = POINTER TO JNIEnv;

  PProc = PROCEDURE ( (* env *) PJNIEnv ): jint;

  PProc0 = PROCEDURE ( (* env *) PJNIEnv, (* name *) PCHAR, (*
                           loader *) jobject, (* buf *) PCHAR, (* len *) jsize
                           ): jclass;

  PProc1 = PROCEDURE ( (* env *) PJNIEnv, (* name *) ARRAY OF CHAR ):
                           jclass;

  PProc2 = PROCEDURE ( (* env *) PJNIEnv, (* method *) jobject ):
                           jmethodID;

  PProc3 = PROCEDURE ( (* env *) PJNIEnv, (* field *) jobject ): jfieldID;

  PProc4 = PROCEDURE ( (* env *) PJNIEnv, (* cls *) jclass, (* methodID
                           *) jmethodID ): jobject;

  PProc5 = PROCEDURE ( (* env *) PJNIEnv, (* sub *) jclass ): jclass;

  PProc6 = PROCEDURE ( (* env *) PJNIEnv, (* sub *) jclass, (* sup *)
                           jclass ): jboolean;

  PProc7 = PROCEDURE ( (* env *) PJNIEnv, (* cls *) jclass, (* fieldID *)
                           jfieldID ): jobject;

  PProc8 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jthrowable ): jint;

  PProc9 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (* msg *)
                        ARRAY OF CHAR ): jint;

  PProc10 = PROCEDURE ( (* env *) PJNIEnv ): jthrowable;

  PProc11 = PROCEDURE ( (* env *) PJNIEnv );

  PProc12 = PROCEDURE ( (* env *) PJNIEnv );

  PProc13 = PROCEDURE ( (* env *) PJNIEnv, (* msg *) ARRAY OF CHAR );

  PProc14 = PROCEDURE ( (* env *) PJNIEnv, (* capacity *) jint ): jint;

  PProc15 = PROCEDURE ( (* env *) PJNIEnv, (* result *) jobject ):
                            jobject;

  PProc16 = PROCEDURE ( (* env *) PJNIEnv, (* lobj *) jobject ): jobject;

  PProc17 = PROCEDURE ( (* env *) PJNIEnv, (* gref *) jobject );

  PProc18 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject );

  PProc19 = PROCEDURE ( (* env *) PJNIEnv, (* obj1 *) jobject, (* obj2 *)
                            jobject ): jboolean;

  PProc20 = PROCEDURE ( (* env *) PJNIEnv, (* ref *) jobject ): jobject;

  PProc21 = PROCEDURE ( (* env *) PJNIEnv, (* capacity *) jint ): jint;

  PProc22 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass ): jobject;

  PProc23 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                            methodID *) jmethodID, SEQ SYSTEM.BYTE ): jobject;

  PProc24 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                            methodID *) jmethodID, (* args *) va_list ): jobject;

  Pjvalue = POINTER TO jvalue;

  PProc25 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                            methodID *) jmethodID, (* args *) Pjvalue ):
                            jobject;

  PProc26 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject ): jclass;

  PProc27 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass ): jboolean;

  PProc28 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (* name *)
                            PCHAR, (* sig *) PCHAR ): jmethodID;

  PProc29 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, SEQ SYSTEM.BYTE ): jobject;

  PProc30 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, (* args *) va_list ): jobject;

  PProc31 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, (* args *) Pjvalue ): jobject;

  PProc32 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, SEQ SYSTEM.BYTE ): jboolean;

  PProc33 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, (* args *) va_list ): jboolean;

  PProc34 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, (* args *) Pjvalue ): jboolean;

  PProc35 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, SEQ SYSTEM.BYTE ): jbyte;

  PProc36 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, (* args *) va_list ): jbyte;

  PProc37 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, (* args *) Pjvalue ): jbyte;

  PProc38 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, SEQ SYSTEM.BYTE ): jchar;

  PProc39 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, (* args *) va_list ): jchar;

  PProc40 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, (* args *) Pjvalue ): jchar;

  PProc41 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, SEQ SYSTEM.BYTE ): jshort;

  PProc42 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, (* args *) va_list ): jshort;

  PProc43 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, (* args *) Pjvalue ): jshort;

  PProc44 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, SEQ SYSTEM.BYTE ): jint;

  PProc45 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, (* args *) va_list ): jint;

  PProc46 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, (* args *) Pjvalue ): jint;

  PProc47 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, SEQ SYSTEM.BYTE ): jlong;

  PProc48 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, (* args *) va_list ): jlong;

  PProc49 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, (* args *) Pjvalue ): jlong;

  PProc50 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, SEQ SYSTEM.BYTE ): jfloat;

  PProc51 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, (* args *) va_list ): jfloat;

  PProc52 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, (* args *) Pjvalue ): jfloat;

  PProc53 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, SEQ SYSTEM.BYTE ): jdouble;

  PProc54 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, (* args *) va_list ): jdouble;

  PProc55 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, (* args *) Pjvalue ): jdouble;

  PProc56 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, SEQ SYSTEM.BYTE );

  PProc57 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, (* args *) va_list );

  PProc58 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* methodID
                            *) jmethodID, (* args *) Pjvalue );

  PProc59 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, SEQ SYSTEM.BYTE ): 
                            jobject;

  PProc60 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, (* args *) va_list ): 
                            jobject;

  PProc61 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, (* args *) 
                            Pjvalue ): jobject;

  PProc62 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, SEQ SYSTEM.BYTE ): 
                            jboolean;

  PProc63 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, (* args *) va_list ): 
                            jboolean;

  PProc64 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, (* args *) 
                            Pjvalue ): jboolean;

  PProc65 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, SEQ SYSTEM.BYTE ): 
                            jbyte;

  PProc66 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, (* args *) va_list ): 
                            jbyte;

  PProc67 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, (* args *) 
                            Pjvalue ): jbyte;

  PProc68 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, SEQ SYSTEM.BYTE ): 
                            jchar;

  PProc69 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, (* args *) va_list ): 
                            jchar;

  PProc70 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, (* args *) 
                            Pjvalue ): jchar;

  PProc71 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, SEQ SYSTEM.BYTE ): 
                            jshort;

  PProc72 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, (* args *) va_list ): 
                            jshort;

  PProc73 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, (* args *) 
                            Pjvalue ): jshort;

  PProc74 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, SEQ SYSTEM.BYTE ): jint;

  PProc75 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, (* args *) va_list ): 
                            jint;

  PProc76 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, (* args *) 
                            Pjvalue ): jint;

  PProc77 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, SEQ SYSTEM.BYTE ): 
                            jlong;

  PProc78 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, (* args *) va_list ): 
                            jlong;

  PProc79 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, (* args *) 
                            Pjvalue ): jlong;

  PProc80 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, SEQ SYSTEM.BYTE ): 
                            jfloat;

  PProc81 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, (* args *) va_list ): 
                            jfloat;

  PProc82 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, (* args *) 
                            Pjvalue ): jfloat;

  PProc83 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, SEQ SYSTEM.BYTE ): 
                            jdouble;

  PProc84 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, (* args *) va_list ): 
                            jdouble;

  PProc85 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, (* args *) 
                            Pjvalue ): jdouble;

  PProc86 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, SEQ SYSTEM.BYTE );

  PProc87 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, (* args *) va_list );

  PProc88 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* clazz *)
                            jclass, (* methodID *) jmethodID, (* args *) 
                            Pjvalue );

  PProc89 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (* name *)
                            PCHAR, (* sig *) PCHAR ): jfieldID;
		
  PProc90 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* fieldID
                            *) jfieldID ): jobject;

  PProc91 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* fieldID
                            *) jfieldID ): jboolean;

  PProc92 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* fieldID
                            *) jfieldID ): jbyte;

  PProc93 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* fieldID
                            *) jfieldID ): jchar;

  PProc94 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* fieldID
                            *) jfieldID ): jshort;

  PProc95 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* fieldID
                            *) jfieldID ): jint;

  PProc96 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* fieldID
                            *) jfieldID ): jlong;

  PProc97 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* fieldID
                            *) jfieldID ): jfloat;

  PProc98 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* fieldID
                            *) jfieldID ): jdouble;

  PProc99 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* fieldID
                            *) jfieldID, (* val *) jobject );

  PProc100 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* fieldID
                             *) jfieldID, (* val *) jboolean );

  PProc101 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* fieldID
                             *) jfieldID, (* val *) jbyte );

  PProc102 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* fieldID
                             *) jfieldID, (* val *) jchar );

  PProc103 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* fieldID
                             *) jfieldID, (* val *) jshort );

  PProc104 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* fieldID
                             *) jfieldID, (* val *) jint );

  PProc105 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* fieldID
                             *) jfieldID, (* val *) jlong );

  PProc106 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* fieldID
                             *) jfieldID, (* val *) jfloat );

  PProc107 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject, (* fieldID
                             *) jfieldID, (* val *) jdouble );

  PProc108 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (* name
                             *) PCHAR, (* sig *) PCHAR ): jmethodID;

  PProc109 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, SEQ SYSTEM.BYTE ): jobject;

  PProc110 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, (* args *) va_list ): jobject;

  PProc111 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, (* args *) Pjvalue ):
                             jobject;

  PProc112 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, SEQ SYSTEM.BYTE ): jboolean;

  PProc113 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, (* args *) va_list ): jboolean;

  PProc114 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, (* args *) Pjvalue ):
                             jboolean;

  PProc115 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, SEQ SYSTEM.BYTE ): jbyte;

  PProc116 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, (* args *) va_list ): jbyte;

  PProc117 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, (* args *) Pjvalue ): jbyte;

  PProc118 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, SEQ SYSTEM.BYTE ): jchar;

  PProc119 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, (* args *) va_list ): jchar;

  PProc120 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, (* args *) Pjvalue ): jchar;

  PProc121 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, SEQ SYSTEM.BYTE ): jshort;

  PProc122 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, (* args *) va_list ): jshort;

  PProc123 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, (* args *) Pjvalue ):
                             jshort;

  PProc124 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, SEQ SYSTEM.BYTE ): jint;

  PProc125 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, (* args *) va_list ): jint;

  PProc126 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, (* args *) Pjvalue ): jint;

  PProc127 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, SEQ SYSTEM.BYTE ): jlong;

  PProc128 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, (* args *) va_list ): jlong;

  PProc129 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, (* args *) Pjvalue ): jlong;

  PProc130 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, SEQ SYSTEM.BYTE ): jfloat;

  PProc131 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, (* args *) va_list ): jfloat;

  PProc132 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, (* args *) Pjvalue ):
                             jfloat;

  PProc133 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, SEQ SYSTEM.BYTE ): jdouble;

  PProc134 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, (* args *) va_list ): jdouble;

  PProc135 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methodID *) jmethodID, (* args *) Pjvalue ):
                             jdouble;

  PProc136 = PROCEDURE ( (* env *) PJNIEnv, (* cls *) jclass, (* methodID
                             *) jmethodID, SEQ SYSTEM.BYTE );

  PProc137 = PROCEDURE ( (* env *) PJNIEnv, (* cls *) jclass, (* methodID
                             *) jmethodID, (* args *) va_list );

  PProc138 = PROCEDURE ( (* env *) PJNIEnv, (* cls *) jclass, (* methodID
                             *) jmethodID, (* args *) Pjvalue );

  PProc139 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (* name
                             *) PCHAR, (* sig *) PCHAR ): jfieldID;

  PProc140 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             fieldID *) jfieldID ): jobject;

  PProc141 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             fieldID *) jfieldID ): jboolean;

  PProc142 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             fieldID *) jfieldID ): jbyte;

  PProc143 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             fieldID *) jfieldID ): jchar;

  PProc144 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             fieldID *) jfieldID ): jshort;

  PProc145 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             fieldID *) jfieldID ): jint;

  PProc146 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             fieldID *) jfieldID ): jlong;

  PProc147 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             fieldID *) jfieldID ): jfloat;

  PProc148 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             fieldID *) jfieldID ): jdouble;

  PProc149 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             fieldID *) jfieldID, (* value *) jobject );

  PProc150 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             fieldID *) jfieldID, (* value *) jboolean );

  PProc151 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             fieldID *) jfieldID, (* value *) jbyte );

  PProc152 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             fieldID *) jfieldID, (* value *) jchar );

  PProc153 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             fieldID *) jfieldID, (* value *) jshort );

  PProc154 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             fieldID *) jfieldID, (* value *) jint );

  PProc155 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             fieldID *) jfieldID, (* value *) jlong );

  PProc156 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             fieldID *) jfieldID, (* value *) jfloat );

  PProc157 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             fieldID *) jfieldID, (* value *) jdouble );

  PProc158 = PROCEDURE ( (* env *) PJNIEnv, (* unicode *) PUCHAR,
                             (* len *) jsize ): jstring;

  PProc159 = PROCEDURE ( (* env *) PJNIEnv, (* str *) jstring ): jsize;

  Pjboolean = POINTER TO jboolean;

  PProc160 = PROCEDURE ( (* env *) PJNIEnv, (* str *) jstring, (* isCopy
                             *) Pjboolean ): PUCHAR;

  PProc161 = PROCEDURE ( (* env *) PJNIEnv, (* str *) jstring, (* chars
                             *) PUCHAR );

  PProc162 = PROCEDURE ( (* env *) PJNIEnv, (* utf *) PCHAR ):
                             jstring;

  PProc163 = PROCEDURE ( (* env *) PJNIEnv, (* str *) jstring ): jsize;

  PProc164 = PROCEDURE ( (* env *) PJNIEnv, (* str *) jstring, (* isCopy
                             *) Pjboolean ): PCHAR;

  PProc165 = PROCEDURE ( (* env *) PJNIEnv, (* str *) jstring, (* chars
                             *) PCHAR );

  PProc166 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jarray ): jsize;

  PProc167 = PROCEDURE ( (* env *) PJNIEnv, (* len *) jsize, (* clazz *)
                             jclass, (* init *) jobject ): jobjectArray;

  PProc168 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jobjectArray, (*
                             index *) jsize ): jobject;

  PProc169 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jobjectArray, (*
                             index *) jsize, (* val *) jobject );

  PProc170 = PROCEDURE ( (* env *) PJNIEnv, (* len *) jsize ):
                             jbooleanArray;

  PProc171 = PROCEDURE ( (* env *) PJNIEnv, (* len *) jsize ): jbyteArray;

  PProc172 = PROCEDURE ( (* env *) PJNIEnv, (* len *) jsize ): jcharArray;

  PProc173 = PROCEDURE ( (* env *) PJNIEnv, (* len *) jsize ):
                             jshortArray;

  PProc174 = PROCEDURE ( (* env *) PJNIEnv, (* len *) jsize ): jintArray;

  PProc175 = PROCEDURE ( (* env *) PJNIEnv, (* len *) jsize ): jlongArray;

  PProc176 = PROCEDURE ( (* env *) PJNIEnv, (* len *) jsize ):
                             jfloatArray;

  PProc177 = PROCEDURE ( (* env *) PJNIEnv, (* len *) jsize ):
                             jdoubleArray;

  PProc178 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jbooleanArray, (*
                             isCopy *) Pjboolean ): Pjboolean;

  PProc179 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jbyteArray, (*
                             isCopy *) Pjboolean ): PCHAR;

  PProc180 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jcharArray, (*
                             isCopy *) Pjboolean ): PUCHAR;

  Pjshort = POINTER TO jshort;

  PProc181 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jshortArray, (*
                             isCopy *) Pjboolean ): Pjshort;

  Pjint = POINTER TO jint;

  PProc182 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jintArray, (*
                             isCopy *) Pjboolean ): Pjint;

  Pjlong = POINTER TO jlong;

  Pjbyte = POINTER TO jbyte;

  Pjchar = POINTER TO jchar;

  Pjdouble = POINTER TO jdouble;

  PProc183 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jlongArray, (*
                             isCopy *) Pjboolean ): Pjlong;

  Pjfloat = POINTER TO jfloat;

  PProc184 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jfloatArray, (*
                             isCopy *) Pjboolean ): Pjfloat;

  PProc185 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jdoubleArray, (*
                             isCopy *) Pjboolean ): Pjlong;

  PProc186 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jbooleanArray, (*
                             elems *) Pjboolean, (* mode *) jint );

  PProc187 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jbyteArray, (*
                             elems *) PCHAR, (* mode *) jint );

  PProc188 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jcharArray, (*
                             elems *) PUCHAR, (* mode *) jint );

  PProc189 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jshortArray, (*
                             elems *) Pjshort, (* mode *) jint );

  PProc190 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jintArray, (*
                             elems *) Pjint, (* mode *) jint );

  PProc191 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jlongArray, (*
                             elems *) Pjlong, (* mode *) jint );

  PProc192 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jfloatArray, (*
                             elems *) Pjfloat, (* mode *) jint );

  PProc193 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jdoubleArray, (*
                             elems *) Pjlong, (* mode *) jint );

  PProc194 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jbooleanArray, (*
                             start *) jsize, (* l *) jsize, (* buf *) Pjboolean
                             );

  PProc195 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jbyteArray, (*
                             start *) jsize, (* len *) jsize, (* buf *) Pjbyte
			                                  );

  PProc196 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jcharArray, (*
                             start *) jsize, (* len *) jsize, (* buf *) 
                             Pjchar );

  PProc197 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jshortArray, (*
                             start *) jsize, (* len *) jsize, (* buf *) Pjshort
                             );

  PProc198 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jintArray, (*
                             start *) jsize, (* len *) jsize, (* buf *) Pjint );

  PProc199 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jlongArray, (*
                             start *) jsize, (* len *) jsize, (* buf *) Pjlong
                             );

  PProc200 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jfloatArray, (*
                             start *) jsize, (* len *) jsize, (* buf *) Pjfloat
                             );

  PProc201 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jdoubleArray, (*
                             start *) jsize, (* len *) jsize, (* buf *) Pjdouble
			                                  );

  PProc202 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jbooleanArray, (*
                             start *) jsize, (* l *) jsize, (* buf *) Pjboolean
                             );

  PProc203 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jbyteArray, (*
                             start *) jsize, (* len *) jsize, (* buf *) Pjbyte
                             );

  PProc204 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jcharArray, (*
                             start *) jsize, (* len *) jsize, (* buf *) 
                             Pjchar );

  PProc205 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jshortArray, (*
                             start *) jsize, (* len *) jsize, (* buf *) Pjshort
                             );

  PProc206 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jintArray, (*
                             start *) jsize, (* len *) jsize, (* buf *) Pjint );

  PProc207 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jlongArray, (*
                             start *) jsize, (* len *) jsize, (* buf *) Pjlong
                             );

  PProc208 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jfloatArray, (*
                             start *) jsize, (* len *) jsize, (* buf *) Pjfloat
                             );

  PProc209 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jdoubleArray, (*
                             start *) jsize, (* len *) jsize, (* buf *) Pjdouble
			                                  );

  PJNINativeMethod = POINTER TO JNINativeMethod;

  PProc210 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass, (*
                             methods *) PJNINativeMethod, (* nMethods *) jint
                             ): jint;

  PProc211 = PROCEDURE ( (* env *) PJNIEnv, (* clazz *) jclass ): jint;

  PProc212 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject ): jint;

  PProc213 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject ): jint;

  PJavaVM = POINTER TO RECORD END;

  PPJavaVM = POINTER TO PJavaVM;

  PProc214 = PROCEDURE ( (* env *) PJNIEnv, (* vm *) PPJavaVM ):
                             jint;

  PProc215 = PROCEDURE ( (* env *) PJNIEnv, (* str *) jstring, (* start
                             *) jsize, (* len *) jsize, (* buf *) Pjchar );

  PProc216 = PROCEDURE ( (* env *) PJNIEnv, (* str *) jstring, (* start
                             *) jsize, (* len *) jsize, (* buf *) PCHAR );

  PProc217 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jarray, (* isCopy
                             *) Pjboolean ): SYSTEM.ADDRESS;

  PProc218 = PROCEDURE ( (* env *) PJNIEnv, (* array *) jarray, (* carray
                             *) SYSTEM.ADDRESS, (* mode *) jint );

  PProc219 = PROCEDURE ( (* env *) PJNIEnv, (* string *) jstring, (*
                             isCopy *) Pjboolean ): Pjchar;

  PProc220 = PROCEDURE ( (* env *) PJNIEnv, (* string *) jstring, (*
                             cstring *) Pjchar );

  PProc221 = PROCEDURE ( (* env *) PJNIEnv, (* obj *) jobject ): jweak;

  PProc222 = PROCEDURE ( (* env *) PJNIEnv, (* ref *) jweak );

  PProc223 = PROCEDURE ( (* env *) PJNIEnv ): jboolean;

  JNINativeInterface = RECORD
    reserved0                    : SYSTEM.ADDRESS;
    reserved1                    : SYSTEM.ADDRESS;
    reserved2                    : SYSTEM.ADDRESS;
    reserved3                    : SYSTEM.ADDRESS;
    GetVersion                   : PProc;
    DefineClass                  : PProc0;
    FindClass                    : PProc1;
    FromReflectedMethod          : PProc2;
    FromReflectedField           : PProc3;
    ToReflectedMethod            : PProc4;
    GetSuperclass                : PProc5;
    IsAssignableFrom             : PProc6;
    ToReflectedField             : PProc7;
    Throw                        : PProc8;
    ThrowNew                     : PProc9;
    ExceptionOccurred            : PProc10;
    ExceptionDescribe            : PProc11;
    ExceptionClear               : PProc12;
    FatalError                   : PProc13;
    PushLocalFrame               : PProc14;
    PopLocalFrame                : PProc15;
    NewGlobalRef                 : PProc16;
    DeleteGlobalRef              : PProc17;
    DeleteLocalRef               : PProc18;
    IsSameObject                 : PProc19;
    NewLocalRef                  : PProc20;
    EnsureLocalCapacity          : PProc21;
    AllocObject                  : PProc22;
    NewObject                    : PProc23;
    NewObjectV                   : PProc24;
    NewObjectA                   : PProc25;
    GetObjectClass               : PProc26;
    IsInstanceOf                 : PProc27;
    GetMethodID                  : PProc28;
    CallObjectMethod             : PProc29;
    CallObjectMethodV            : PProc30;
    CallObjectMethodA            : PProc31;
    CallBooleanMethod            : PProc32;
    CallBooleanMethodV           : PProc33;
    CallBooleanMethodA           : PProc34;
    CallByteMethod               : PProc35;
    CallByteMethodV              : PProc36;
    CallByteMethodA              : PProc37;
    CallCharMethod               : PProc38;
    CallCharMethodV              : PProc39;
    CallCharMethodA              : PProc40;
    CallShortMethod              : PProc41;
    CallShortMethodV             : PProc42;
    CallShortMethodA             : PProc43;
    CallIntMethod                : PProc44;
    CallIntMethodV               : PProc45;
    CallIntMethodA               : PProc46;
    CallLongMethod               : PProc47;
    CallLongMethodV              : PProc48;
    CallLongMethodA              : PProc49;
    CallFloatMethod              : PProc50;
    CallFloatMethodV             : PProc51;
    CallFloatMethodA             : PProc52;
    CallDoubleMethod             : PProc53;
    CallDoubleMethodV            : PProc54;
    CallDoubleMethodA            : PProc55;
    CallVoidMethod               : PProc56;
    CallVoidMethodV              : PProc57;
    CallVoidMethodA              : PProc58;
    CallNonvirtualObjectMethod   : PProc59;
    CallNonvirtualObjectMethodV  : PProc60;
    CallNonvirtualObjectMethodA  : PProc61;
    CallNonvirtualBooleanMethod  : PProc62;
    CallNonvirtualBooleanMethodV : PProc63;
    CallNonvirtualBooleanMethodA : PProc64;
    CallNonvirtualByteMethod     : PProc65;
    CallNonvirtualByteMethodV    : PProc66;
    CallNonvirtualByteMethodA    : PProc67;
    CallNonvirtualCharMethod     : PProc68;
    CallNonvirtualCharMethodV    : PProc69;
    CallNonvirtualCharMethodA    : PProc70;
    CallNonvirtualShortMethod    : PProc71;
    CallNonvirtualShortMethodV   : PProc72;
    CallNonvirtualShortMethodA   : PProc73;
    CallNonvirtualIntMethod      : PProc74;
    CallNonvirtualIntMethodV     : PProc75;
    CallNonvirtualIntMethodA     : PProc76;
    CallNonvirtualLongMethod     : PProc77;
    CallNonvirtualLongMethodV    : PProc78;
    CallNonvirtualLongMethodA    : PProc79;
    CallNonvirtualFloatMethod    : PProc80;
    CallNonvirtualFloatMethodV   : PProc81;
    CallNonvirtualFloatMethodA   : PProc82;
    CallNonvirtualDoubleMethod   : PProc83;
    CallNonvirtualDoubleMethodV  : PProc84;
    CallNonvirtualDoubleMethodA  : PProc85;
    CallNonvirtualVoidMethod     : PProc86;
    CallNonvirtualVoidMethodV    : PProc87;
    CallNonvirtualVoidMethodA    : PProc88;
    GetFieldID                   : PProc89;
    GetObjectField               : PProc90;
    GetBooleanField              : PProc91;
    GetByteField                 : PProc92;
    GetCharField                 : PProc93;
    GetShortField                : PProc94;
    GetIntField                  : PProc95;
    GetLongField                 : PProc96;
    GetFloatField                : PProc97;
    GetDoubleField               : PProc98;
    SetObjectField               : PProc99;
    SetBooleanField              : PProc100;
    SetByteField                 : PProc101;
    SetCharField                 : PProc102;
    SetShortField                : PProc103;
    SetIntField                  : PProc104;
    SetLongField                 : PProc105;
    SetFloatField                : PProc106;
    SetDoubleField               : PProc107;
    GetStaticMethodID            : PProc108;
    CallStaticObjectMethod       : PProc109;
    CallStaticObjectMethodV      : PProc110;
    CallStaticObjectMethodA      : PProc111;
    CallStaticBooleanMethod      : PProc112;
    CallStaticBooleanMethodV     : PProc113;
    CallStaticBooleanMethodA     : PProc114;
    CallStaticByteMethod         : PProc115;
    CallStaticByteMethodV        : PProc116;
    CallStaticByteMethodA        : PProc117;
    CallStaticCharMethod         : PProc118;
    CallStaticCharMethodV        : PProc119;
    CallStaticCharMethodA        : PProc120;
    CallStaticShortMethod        : PProc121;
    CallStaticShortMethodV       : PProc122;
    CallStaticShortMethodA       : PProc123;
    CallStaticIntMethod          : PProc124;
    CallStaticIntMethodV         : PProc125;
    CallStaticIntMethodA         : PProc126;
    CallStaticLongMethod         : PProc127;
    CallStaticLongMethodV        : PProc128;
    CallStaticLongMethodA        : PProc129;
    CallStaticFloatMethod        : PProc130;
    CallStaticFloatMethodV       : PProc131;
    CallStaticFloatMethodA       : PProc132;
    CallStaticDoubleMethod       : PProc133;
    CallStaticDoubleMethodV      : PProc134;
    CallStaticDoubleMethodA      : PProc135;
    CallStaticVoidMethod         : PProc136;
    CallStaticVoidMethodV        : PProc137;
    CallStaticVoidMethodA        : PProc138;
    GetStaticFieldID             : PProc139;
    GetStaticObjectField         : PProc140;
    GetStaticBooleanField        : PProc141;
    GetStaticByteField           : PProc142;
    GetStaticCharField           : PProc143;
    GetStaticShortField          : PProc144;
    GetStaticIntField            : PProc145;
    GetStaticLongField           : PProc146;
    GetStaticFloatField          : PProc147;
    GetStaticDoubleField         : PProc148;
    SetStaticObjectField         : PProc149;
    SetStaticBooleanField        : PProc150;
    SetStaticByteField           : PProc151;
    SetStaticCharField           : PProc152;
    SetStaticShortField          : PProc153;
    SetStaticIntField            : PProc154;
    SetStaticLongField           : PProc155;
    SetStaticFloatField          : PProc156;
    SetStaticDoubleField         : PProc157;
    NewString                    : PProc158;
    GetStringLength              : PProc159;
    GetStringChars               : PProc160;
    ReleaseStringChars           : PProc161;
    NewStringUTF                 : PProc162;
    GetStringUTFLength           : PProc163;
    GetStringUTFChars            : PProc164;
    ReleaseStringUTFChars        : PProc165;
    GetArrayLength               : PProc166;
    NewObjectArray               : PProc167;
    GetObjectArrayElement        : PProc168;
    SetObjectArrayElement        : PProc169;
    NewBooleanArray              : PProc170;
    NewByteArray                 : PProc171;
    NewCharArray                 : PProc172;
    NewShortArray                : PProc173;
    NewIntArray                  : PProc174;
    NewLongArray                 : PProc175;
    NewFloatArray                : PProc176;
    NewDoubleArray               : PProc177;
    GetBooleanArrayElements      : PProc178;
    GetByteArrayElements         : PProc179;
    GetCharArrayElements         : PProc180;
    GetShortArrayElements        : PProc181;
    GetIntArrayElements          : PProc182;
    GetLongArrayElements         : PProc183;
    GetFloatArrayElements        : PProc184;
    GetDoubleArrayElements       : PProc185;

    ReleaseBooleanArrayElements  : PProc186;
    ReleaseByteArrayElements     : PProc187;
    ReleaseCharArrayElements     : PProc188;
    ReleaseShortArrayElements    : PProc189;
    ReleaseIntArrayElements      : PProc190;
    ReleaseLongArrayElements     : PProc191;
    ReleaseFloatArrayElements    : PProc192;
    ReleaseDoubleArrayElements   : PProc193;

    GetBooleanArrayRegion        : PProc194;
    GetByteArrayRegion           : PProc195;
    GetCharArrayRegion           : PProc196;
    GetShortArrayRegion          : PProc197;
    GetIntArrayRegion            : PProc198;
    GetLongArrayRegion           : PProc199;
    GetFloatArrayRegion          : PProc200;
    GetDoubleArrayRegion         : PProc201;
    SetBooleanArrayRegion        : PProc202;
    SetByteArrayRegion           : PProc203;
    SetCharArrayRegion           : PProc204;
    SetShortArrayRegion          : PProc205;
    SetIntArrayRegion            : PProc206;
    SetLongArrayRegion           : PProc207;
    SetFloatArrayRegion          : PProc208;
    SetDoubleArrayRegion         : PProc209;
    RegisterNatives              : PProc210;
    UnregisterNatives            : PProc211;

    MonitorEnter                 : PProc212;
    MonitorExit                  : PProc213;
    GetJavaVM                    : PProc214;

    GetStringRegion              : PProc215;
    GetStringUTFRegion           : PProc216;
    GetPrimitiveArrayCritical    : PProc217;
    ReleasePrimitiveArrayCritical: PProc218;
    GetStringCritical            : PProc219;
    ReleaseStringCritical        : PProc220;
    NewWeakGlobalRef             : PProc221;
    DeleteWeakGlobalRef          : PProc222;
    ExceptionCheck               : PProc223;
  END;

  JNIEnv = POINTER TO JNINativeInterface;

END JNI.
