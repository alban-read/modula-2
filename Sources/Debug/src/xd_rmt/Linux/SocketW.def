<* +M2EXTENSIONS  *>
<* ALIGNMENT="8" *>
<* ENUMSIZE="4" *>
<* SETSIZE="4" *>
<* NOHEADER+ *> -- NEVER GET THE HEADER FOR THIS FILE

DEFINITION MODULE ["C"] SocketW;

IMPORT SYSTEM;

TYPE
  UINT   = SYSTEM.unsigned;
  USHORT = SYSTEM.CARD16;
  ULONG  = SYSTEM.CARD32;
  UCHAR  = CHAR;
  BOOL   = SYSTEM.BOOL32;

  INT   = SYSTEM.int;
  SHORT = SYSTEM.INT16;
  LONG  = SYSTEM.INT32;

  PSTR   = POINTER TO CHAR;
  PPSTR  = POINTER TO PSTR;
  PBYTE  = POINTER TO SYSTEM.BYTE;
  PCBYTE = PBYTE;

  u_char   = UCHAR;
  u_short  = USHORT;
  u_int    = UINT;
  u_long   = ULONG;
  p_u_long = POINTER TO u_long;

(*
 * The new type to be used in all
 * instances which refer to sockets.
 *)
TYPE SOCKET = u_int;

CONST INVALID_SOCKET = VAL (SOCKET, 0FFFFFFFFh);
      SOCKET_ERROR   = -1;

(*
 * Types
 *)

CONST SOCK_STREAM     = 1;               (* stream socket *)
      SOCK_DGRAM      = 2;               (* datagram socket *)
      SOCK_RAW        = 3;               (* raw-protocol interface *)
      SOCK_RDM        = 4;               (* reliably-delivered message *)
      SOCK_SEQPACKET  = 5;               (* sequenced packet stream *)

(*
 * Structure used by kernel to store most
 * addresses.
 *)

<* IF BACKEND = "C" THEN *> <* PUSH *> <* GENTYPEDEF- *> <* END *>
TYPE sockaddr = RECORD
                  sa_family : u_short;               (* address family *)
                  sa_data   : ARRAY [0..13] OF CHAR; (* up to 14 bytes of direct address *)
                END;
<* IF BACKEND = "C" THEN *> <* POP *> <* END *>

(* Microsoft Windows Extended data types *)

TYPE  SOCKADDR = sockaddr;
TYPE PSOCKADDR = POINTER TO SOCKADDR;


TYPE in_addr = RECORD
                    CASE : INTEGER OF
                    | 0 : s_b1, s_b2, s_b3, s_b4 : u_char;
                    | 1 : s_w1, s_w2 : u_short;
                    | 2 : S_addr : u_long;
                    | 3 : s_addr : u_long;
                                            (* can be used for most tcp & ip code *)
                    | 4 : s_net,            (* netword *)
                          s_host,           (* host on imp *)
                          s_lh,             (* logical host *)
                          s_impno : u_char; (* imp # *)
                    | 5 : s_dummy,
                          s_imp : u_short;  (* imp *)
                    END;
               END;

(*
 * Address families.
 *)

CONST AF_UNSPEC       = 0;              (* unspecified *)
      AF_UNIX         = 1;              (* local to host (pipes, portals) *)
      AF_INET         = 2;              (* internetwork: UDP, TCP, etc. *)
      AF_IMPLINK      = 3;              (* arpanet imp addresses *)
      AF_PUP          = 4;              (* pup protocols: e.g. BSP *)
      AF_CHAOS        = 5;              (* mit CHAOS protocols *)
      AF_IPX          = 6;              (* IPX and SPX *)
      AF_NS           = 6;              (* XEROX NS protocols *)
      AF_ISO          = 7;              (* ISO protocols *)
      AF_OSI          = AF_ISO;         (* OSI is ISO *)
      AF_ECMA         = 8;              (* european computer manufacturers *)
      AF_DATAKIT      = 9;              (* datakit protocols *)
      AF_CCITT        = 10;             (* CCITT protocols, X.25 etc *)
      AF_SNA          = 11;             (* IBM SNA *)
      AF_DECnet       = 12;             (* DECnet *)
      AF_DLI          = 13;             (* Direct data link interface *)
      AF_LAT          = 14;             (* LAT *)
      AF_HYLINK       = 15;             (* NSC Hyperchannel *)
      AF_APPLETALK    = 16;             (* AppleTalk *)
      AF_NETBIOS      = 17;             (* NetBios-style addresses *)
      AF_VOICEVIEW    = 18;             (* VoiceView *)

      AF_MAX          = 19;


(*
 * Definitions of bits in internet address integers.
 * On subnets, the decomposition of addresses to host and net parts
 * is done according to subnet mask, not the masks here.
 *)

(* IN_CLASSA, IN_CLASSB, IN_CLASSC implemented in RTL *)

PROCEDURE IN_CLASSA (i : ULONG) : BOOL;

CONST IN_CLASSA_NET         = 0ff000000h;
      IN_CLASSA_NSHIFT      = 24;
      IN_CLASSA_HOST        = 000ffffffh;
      IN_CLASSA_MAX         = 128;

PROCEDURE IN_CLASSB (i : ULONG) : BOOL;

CONST IN_CLASSB_NET         = 0ffff0000h;
      IN_CLASSB_NSHIFT      = 16;
      IN_CLASSB_HOST        = 00000ffffh;
      IN_CLASSB_MAX         = 65536;

PROCEDURE IN_CLASSC (i : ULONG) : BOOL;

CONST IN_CLASSC_NET         = 0ffffff00h;
      IN_CLASSC_NSHIFT      = 8;
      IN_CLASSC_HOST        = 0000000ffh;

      INADDR_ANY            = 000000000h;
      INADDR_LOOPBACK       = 07f000001h;
      INADDR_BROADCAST      = 0ffffffffh;
      INADDR_NONE           = 0ffffffffh;

(*
 * Protocol families, same as address families for now.
 *)

CONST PF_UNSPEC      = AF_UNSPEC;
      PF_UNIX        = AF_UNIX;
      PF_INET        = AF_INET;
      PF_IMPLINK     = AF_IMPLINK;
      PF_PUP         = AF_PUP;
      PF_CHAOS       = AF_CHAOS;
      PF_NS          = AF_NS;
      PF_IPX         = AF_IPX;
      PF_ISO         = AF_ISO;
      PF_OSI         = AF_OSI;
      PF_ECMA        = AF_ECMA;
      PF_DATAKIT     = AF_DATAKIT;
      PF_CCITT       = AF_CCITT;
      PF_SNA         = AF_SNA;
      PF_DECnet      = AF_DECnet;
      PF_DLI         = AF_DLI;
      PF_LAT         = AF_LAT;
      PF_HYLINK      = AF_HYLINK;
      PF_APPLETALK   = AF_APPLETALK;
      PF_VOICEVIEW   = AF_VOICEVIEW;

      PF_MAX         = AF_MAX;

CONST SOL_SOCKET     = 1;
      SO_REUSEADDR   = 2;

CONST SHUT_RD        = 0;
      SHUT_WR        = 1;
      SHUT_RDWR      = 2;

(*
 * Socket address, internet style.
 *)

<* IF BACKEND = "C" THEN *> <* PUSH *> <* GENTYPEDEF- *> <* END *>
TYPE sockaddr_in = RECORD
                        sin_family : SHORT;
                        sin_port   : u_short;
                        sin_addr   : in_addr;
                        sin_zero   : ARRAY [0..7] OF CHAR;
                   END;
<* IF BACKEND = "C" THEN *> <* POP *> <* END *>

TYPE  SOCKADDR_IN = sockaddr_in;
TYPE PSOCKADDR_IN = POINTER TO SOCKADDR_IN;

(*
 * Structures returned by network data base library, taken from the
 * BSD file netdb.h.  All addresses are supplied in host order, and
 * returned in network order (suitable for use in system calls).
 *)

TYPE hostent = RECORD
                      h_name      : PSTR;  (* official name of host *)
                      h_aliases   : PPSTR; (* alias list *)
                      h_addrtype  : SHORT; (* host address type *)
                      h_length    : SHORT; (* length of address *)
                      h_addr_list : PPSTR; (* list of addresses *)
               END;
   p_hostent = POINTER TO hostent;

TYPE  HOSTENT = hostent;
TYPE PHOSTENT = POINTER TO HOSTENT;


(* Socket function prototypes *)

PROCEDURE accept (s : SOCKET; VAR addr : sockaddr; VAR [NIL] addrlen : INTEGER) : SOCKET;

PROCEDURE htons (hostshort : u_short) : u_short;

PROCEDURE gethostname (name : PSTR; namelen : INTEGER) : INTEGER;

PROCEDURE socket (af : INTEGER; type : INTEGER; protocol : INTEGER) : SOCKET;

PROCEDURE closesocket (s : SOCKET) : INTEGER;

<* IF BACKEND # "C" THEN *>
PROCEDURE bind (s : SOCKET; addr : sockaddr; namelen : INTEGER) : INTEGER;
<* ELSE *>
PROCEDURE bind (s : SOCKET; addr : PSOCKADDR; namelen : INTEGER) : INTEGER;
<* END *>

PROCEDURE setsockopt(s : SOCKET; level, optname: INTEGER; optval: SYSTEM.ADDRESS; optlen: INTEGER): INTEGER;

PROCEDURE listen (s : SOCKET; backlog : INTEGER) : INTEGER;

<* IF BACKEND # "C" THEN *>
PROCEDURE connect (s : SOCKET; name : sockaddr; namelen : INTEGER) : INTEGER;
<* ELSE *>
PROCEDURE connect (s : SOCKET; name : PSOCKADDR; namelen : INTEGER) : INTEGER;
<* END *>

PROCEDURE send (s : SOCKET; buf : PCBYTE; len : INTEGER; flags : INTEGER) : INTEGER;

PROCEDURE recv (s : SOCKET; buf : PBYTE; len : INTEGER; flags : INTEGER) : INTEGER;

PROCEDURE shutdown (s : SOCKET; how : INTEGER): INTEGER;


(* Database function prototypes *)

PROCEDURE gethostbyname (name : ARRAY OF CHAR) : p_hostent;



END SocketW.
