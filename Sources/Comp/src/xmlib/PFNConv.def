(* Copyright (c) 1994,97 XDS Ltd, Russia. All Rights Reserved. *)
DEFINITION MODULE PFNConv; (* Ned 15-Feb-94. *)

IMPORT SYSTEM;

(*
  This module implements portable file name manager.
  It consideres file name consists of three parts:
    - directory name
    - file name
    - extension
  All parsing and constructing procedures works with so called internal
  name representation - a UNIX-like syntax with a bit of extensions.
  Functions ConvertFrom and ConvertTo are provided to cinvert to and from
  an internal representation.

  ConvertFrom - converts filename from host or internal representation to
  internal representation

  ConvertTo - converts from internal representation to given target.

  Targets/hosts should be supported:
    FATFS - MS/DOS 8.3 form names
    UNC - MS/DOS-like names without length restrictions plus UNC
    UNIX  - UNIX (tm) syntax
    MACOS - Apple MacOS
    VMS   - VAX/VMS
*)

CONST
  FATFS="FATFS";
  OS2  ="OS2";
  UNC  ="UNC";
  UNIX ="UNIX";
  VMS  ="VMS";

VAR PLATFORM: ARRAY [0..7] OF CHAR;

(* Internalisation/externalisation of filenames *)

PROCEDURE ConvertFromHostLength(host,str: ARRAY OF CHAR): CARDINAL;
PROCEDURE ConvertFromLength(str: ARRAY OF CHAR): CARDINAL;
PROCEDURE ConvertFromHost(host,fname: ARRAY OF CHAR; VAR str: ARRAY OF CHAR);
PROCEDURE ConvertFrom(fname: ARRAY OF CHAR; VAR str: ARRAY OF CHAR);

PROCEDURE ConvertToTargetLength(target,fname: ARRAY OF CHAR): CARDINAL;
PROCEDURE ConvertToLength(fname: ARRAY OF CHAR): CARDINAL;
PROCEDURE ConvertToTarget(target,fname: ARRAY OF CHAR; VAR str: ARRAY OF CHAR);
PROCEDURE ConvertTo(fname: ARRAY OF CHAR; VAR str: ARRAY OF CHAR);

PROCEDURE ConvertCaseToTarget(target,fname: ARRAY OF CHAR; VAR str: ARRAY OF CHAR);

(* Next procedures work with internal representation *)

TYPE
  Format = RECORD
    ok             : BOOLEAN;  (* result *)
    dirPos, dirLen : CARDINAL; (* directory position and length *)
    namePos,nameLen: CARDINAL; (* name position and length *)
    extPos, extLen : CARDINAL; (* extension position and length *)
  END;

(*----------------------------------------------------------------*)

PROCEDURE IsPathSep(env: ARRAY OF CHAR; ch: CHAR): BOOLEAN;
(* Is "ch" environment variable PATH names separator? *)

(*----------------------------------------------------------------*)

PROCEDURE GetFormat(str: ARRAY OF CHAR; VAR f: Format);
(* Returns the format of the string.
   The values of *Pos, *Len fields are undefined
   if f.ok=FALSE.
*)

(* Get* procedures does not provide conversions
  (ie. no case changes or reductions).
*)

PROCEDURE GetDir (fname: ARRAY OF CHAR; VAR dir: ARRAY OF CHAR);
PROCEDURE GetName(fname: ARRAY OF CHAR; VAR name: ARRAY OF CHAR);
PROCEDURE GetExt (fname: ARRAY OF CHAR; VAR ext: ARRAY OF CHAR);

PROCEDURE Get(fname: ARRAY OF CHAR;
   VAR dir,name,ext: ARRAY OF CHAR);

(*----------------------------------------------------------------*)

PROCEDURE Length(dir,name,ext: CARDINAL): CARDINAL;
(* Returns estimated length, which is greater or equal
   then generated file name length after Create call.
*)

PROCEDURE Create(dir,name,ext: ARRAY OF CHAR;
                    VAR fname: ARRAY OF CHAR);


PROCEDURE SetFATFS(on: BOOLEAN);

END PFNConv.


