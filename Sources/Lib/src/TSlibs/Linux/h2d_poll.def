(* sys/h2d_poll.def  Nov 13  18:56:44  2001 *)
(* Generated by H2D v1.31.0 from sys/poll.h. *)
<*+ M2ADDTYPES *>
<*+ M2EXTENSIONS *>
<*+ NOHEADER *> 
<* IF NOT DEFINED(GENTYPEDEF) THEN *> <* NEW GENTYPEDEF+ *> <* END *>
(* Merged headers: sys/poll.h, features.h, sys/cdefs.h, gnu/stubs.h, bits/poll.h *)

DEFINITION MODULE ["C"] h2d_poll;

IMPORT SYSTEM;
(* H2D:  Required IMPORT clause: 
IMPORT h2d_poll;
*)

(*  Compatibility definitions for System V `poll' interface.                   *)
(*  Copyright (C) 1994, 1996, 1997, 1998 Free Software Foundation, Inc.        *)
(*  This file is part of the GNU C Library.                                    *)
(*                                                                             *)
(*  The GNU C Library is free software; you can redistribute it and/or         *)
(*  modify it under the terms of the GNU Library General Public License as     *)
(*  published by the Free Software Foundation; either version 2 of the         *)
(*  License, or (at your option) any later version.                            *)
(*                                                                             *)
(*  The GNU C Library is distributed in the hope that it will be useful,       *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of             *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU          *)
(*  Library General Public License for more details.                           *)
(*                                                                             *)
(*  You should have received a copy of the GNU Library General Public          *)
(*  License along with the GNU C Library; see the file COPYING.LIB.  If not,   *)
(*  write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,  *)
(*  Boston, MA 02111-1307, USA.                                                *)

<* IF  __GEN_C__ THEN *>

VAR 
  _SYS_POLL_H - : INTEGER;

<* ELSE *>

CONST 
  _SYS_POLL_H = 1;

<* END *>

(*  Copyright (C) 1991, 92, 93, 95, 96, 97, 98 Free Software Foundation, Inc.  *)
(*  This file is part of the GNU C Library.                                    *)
(*                                                                             *)
(*  The GNU C Library is free software; you can redistribute it and/or         *)
(*  modify it under the terms of the GNU Library General Public License as     *)
(*  published by the Free Software Foundation; either version 2 of the         *)
(*  License, or (at your option) any later version.                            *)
(*                                                                             *)
(*  The GNU C Library is distributed in the hope that it will be useful,       *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of             *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU          *)
(*  Library General Public License for more details.                           *)
(*                                                                             *)
(*  You should have received a copy of the GNU Library General Public          *)
(*  License along with the GNU C Library; see the file COPYING.LIB.  If not,   *)
(*  write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,  *)
(*  Boston, MA 02111-1307, USA.                                                *)

<* IF  __GEN_C__ THEN *>

VAR 
  _FEATURES_H - : INTEGER;

<* ELSE *>

CONST 
  _FEATURES_H = 1;

<* END *>

(*    These are defined by the user (or the compiler)                          *)
(*    to specify the desired environment:                                      *)
(*                                                                             *)
(*    __STRICT_ANSI__	ISO Standard C.                                          *)
(*    _ISOC9X_SOURCE	Extensions to ISO C 89 from ISO C 9x.                     *)
(*    _POSIX_SOURCE	IEEE Std 1003.1.                                           *)
(*    _POSIX_C_SOURCE	If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std 1003.2;  *)
(* 			if >=199309L, add IEEE Std 1003.1b-1993;                                 *)
(* 			if >=199506L, add IEEE Std 1003.1c-1995                                  *)
(*    _XOPEN_SOURCE	Includes POSIX and XPG things.  Set to 500 if              *)
(* 			Single Unix conformance is wanted.                                       *)
(*    _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.            *)
(*    _LARGEFILE_SOURCE	Some more functions for correct standard I/O.          *)
(*    _LARGEFILE64_SOURCE	Additional functionality from LFS for large files.   *)
(*    _FILE_OFFSET_BITS=N	Select default filesystem interface.                 *)
(*    _BSD_SOURCE		ISO C, POSIX, and 4.3BSD things.                            *)
(*    _SVID_SOURCE		ISO C, POSIX, and SVID things.                             *)
(*    _GNU_SOURCE		All of the above, plus GNU extensions.                      *)
(*    _REENTRANT		Select additionally reentrant object.                        *)
(*    _THREAD_SAFE		Same as _REENTRANT, often used by other systems.           *)
(*                                                                             *)
(*    The `-ansi' switch to the GNU C compiler defines __STRICT_ANSI__.        *)
(*    If none of these are defined, the default is all but _GNU_SOURCE.        *)
(*    If more than one of these are defined, they accumulate.                  *)
(*    For example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE           *)
(*    together give you ISO C, 1003.1, and 1003.2, but nothing else.           *)
(*                                                                             *)
(*    These are defined by this file and are used by the                       *)
(*    header files to decide what to declare or define:                        *)
(*                                                                             *)
(*    __USE_ISOC9X		Define ISO C 9X things.                                    *)
(*    __USE_POSIX		Define IEEE Std 1003.1 things.                              *)
(*    __USE_POSIX2		Define IEEE Std 1003.2 things.                             *)
(*    __USE_POSIX199309	Define IEEE Std 1003.1, and .1b things.                *)
(*    __USE_POSIX199506	Define IEEE Std 1003.1, .1b, .1c and .1i things.       *)
(*    __USE_XOPEN		Define XPG things.                                          *)
(*    __USE_XOPEN_EXTENDED	Define X/Open Unix things.                          *)
(*    __USE_UNIX98		Define Single Unix V2 things.                              *)
(*    __USE_LARGEFILE64	Define LFS things with separate names.                 *)
(*    __USE_FILE_OFFSET64	Define 64bit interface as default.                   *)
(*    __USE_BSD		Define 4.3BSD things.                                         *)
(*    __USE_SVID		Define SVID things.                                          *)
(*    __USE_MISC		Define things common to BSD and System V Unix.               *)
(*    __USE_GNU		Define GNU extensions.                                        *)
(*    __USE_REENTRANT	Define reentrant/thread-safe *_r functions.              *)
(*    __FAVOR_BSD		Favor 4.3BSD things in cases of conflict.                   *)
(*                                                                             *)
(*    The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are     *)
(*    defined by this file unconditionally.  `__GNU_LIBRARY__' is provided     *)
(*    only for compatibility.  All new code should use the other symbols       *)
(*    to test for features.                                                    *)
(*                                                                             *)
(*    All macros listed above as possibly being defined by this file are       *)
(*    explicitly undefined if they are not explicitly defined.                 *)
(*    Feature-test macros that are not defined by the user or compiler         *)
(*    but are implied by the other feature-test macros defined (or by the      *)
(*    lack of any definitions) are defined by the file.                        *)
(*  Undefine everything, so we get a clean slate.   *)
(*  Suppress kernel-name space pollution unless user expressedly asks  *)
(*  for it.                                                            *)
(* # define __KERNEL_STRICT_NAMES *)
(*  Always use ISO C things.   *)

<* IF  __GEN_C__ THEN *>

VAR 
  __USE_ANSI - : INTEGER;

<* ELSE *>

CONST 
  __USE_ANSI = 1;

<* END *>

(*  If _BSD_SOURCE was defined by the user, favor BSD over POSIX.   *)
(*  If _GNU_SOURCE was defined by the user, turn on all the other features.   *)
(*  If nothing (other than _GNU_SOURCE) is defined,  *)
(*  define _BSD_SOURCE and _SVID_SOURCE.             *)

<* IF  __GEN_C__ THEN *>

VAR 
  _BSD_SOURCE - : INTEGER;
  _SVID_SOURCE - : INTEGER;

<* ELSE *>

CONST 
  _BSD_SOURCE = 1;
  _SVID_SOURCE = 1;

<* END *>

(*  This is to enable the ISO C 9x extension.  It will go away as soon  *)
(*  as this standard is officially released.                            *)
(*  If none of the ANSI/POSIX macros are defined, use POSIX.1 and POSIX.2  *)
(*  (and IEEE Std 1003.1b-1993 unless _XOPEN_SOURCE is defined).           *)

<* IF  __GEN_C__ THEN *>

VAR 
  _POSIX_SOURCE - : INTEGER;
  _POSIX_C_SOURCE - : INTEGER;
  __USE_POSIX - : INTEGER;
  __USE_POSIX2 - : INTEGER;
  __USE_POSIX199309 - : INTEGER;
  __USE_POSIX199506 - : INTEGER;
  __USE_MISC - : INTEGER;
  __USE_BSD - : INTEGER;
  __USE_SVID - : INTEGER;

<* ELSE *>

CONST 
  _POSIX_SOURCE = 1;
  _POSIX_C_SOURCE = 199506;
  __USE_POSIX = 1;
  __USE_POSIX2 = 1;
  __USE_POSIX199309 = 1;
  __USE_POSIX199506 = 1;
  __USE_MISC = 1;
  __USE_BSD = 1;
  __USE_SVID = 1;

<* END *>

(*  We do support the IEC 559 math functionality, real and complex.   *)

<* IF  __GEN_C__ THEN *>

VAR 
  __STDC_IEC_559__ - : INTEGER;
  __STDC_IEC_559_COMPLEX__ - : INTEGER;

<* ELSE *>

CONST 
  __STDC_IEC_559__ = 1;
  __STDC_IEC_559_COMPLEX__ = 1;

<* END *>

(*  This macro indicates that the installed library is the GNU C Library.  *)
(*  For historic reasons the value now is 6 and this will stay from now    *)
(*  on.  The use of this variable is deprecated.  Use __GLIBC__ and        *)
(*  __GLIBC_MINOR__ now (see below) when you want to test for a specific   *)
(*  GNU C library version and use the values in <gnu/lib-names.h> to get   *)
(*  the sonames of the shared libraries.                                   *)

<* IF  __GEN_C__ THEN *>

VAR 
  __GNU_LIBRARY__ - : INTEGER;

<* ELSE *>

CONST 
  __GNU_LIBRARY__ = 6;

<* END *>

(*  Major and minor version number of the GNU C library package.  Use  *)
(*  these macros to test for features in specific releases.            *)

<* IF  __GEN_C__ THEN *>

VAR 
  __GLIBC__ - : INTEGER;
  __GLIBC_MINOR__ - : INTEGER;

<* ELSE *>

CONST 
  __GLIBC__ = 2;
  __GLIBC_MINOR__ = 1;

<* END *>

(*  This is here only because every header file already includes this one.   *)
(*  Copyright (C) 1992,93,94,95,96,97,98,99 Free Software Foundation, Inc.     *)
(*  This file is part of the GNU C Library.                                    *)
(*                                                                             *)
(*  The GNU C Library is free software; you can redistribute it and/or         *)
(*  modify it under the terms of the GNU Library General Public License as     *)
(*  published by the Free Software Foundation; either version 2 of the         *)
(*  License, or (at your option) any later version.                            *)
(*                                                                             *)
(*  The GNU C Library is distributed in the hope that it will be useful,       *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of             *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU          *)
(*  Library General Public License for more details.                           *)
(*                                                                             *)
(*  You should have received a copy of the GNU Library General Public          *)
(*  License along with the GNU C Library; see the file COPYING.LIB.  If not,   *)
(*  write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,  *)
(*  Boston, MA 02111-1307, USA.                                                *)

<* IF  __GEN_C__ THEN *>

VAR 
  _SYS_CDEFS_H - : INTEGER;

<* ELSE *>

CONST 
  _SYS_CDEFS_H = 1;

<* END *>

(*  We are almost always included from features.h.  *)
(*  Some user header file might have defined this before.   *)
(* # define __inline		/* No inline functions.  */ *)

<* IF  __GEN_C__ THEN *>

(* H2D: this procedure corresponds to a macro. *)
PROCEDURE __P ( args: ARRAY OF SYSTEM.BYTE );

(* H2D: this procedure corresponds to a macro. *)
PROCEDURE __PMT ( args: ARRAY OF SYSTEM.BYTE );
<* END *>

(* #  define __const		/* No ANSI C keywords.  */ *)
(* #  define __signed *)
(* #  define __volatile *)
(* #  define __DOTS *)
(*  For these things, GCC behaves the ANSI way normally,  *)
(*  and the non-ANSI way under -traditional.              *)

<* IF  __GEN_C__ THEN *>

(* H2D: this procedure corresponds to a macro. *)
PROCEDURE __CONCAT ( x, y: ARRAY OF SYSTEM.BYTE );

(* H2D: this procedure corresponds to a macro. *)
PROCEDURE __STRING ( x: ARRAY OF SYSTEM.BYTE );
<* END *>

(* # define __ptr_t char * *)
(* # define __long_double_t  long double *)
(*  The BSD header files use the ANSI keywords unmodified (this means that   *)
(*  old programs may lose if they use the new keywords as identifiers), but  *)
(*  those names are not available under -traditional.  We define them to     *)
(*  their __ versions, which are taken care of above.                        *)
(*  C++ needs to know that types and declarations are C, not C++.   *)
(* # define __BEGIN_DECLS *)
(* # define __END_DECLS *)
(*  __asm__ ("xyz") is used throughout the headers to rename functions    *)
(*  at the assembly language level.  This is wrapped by the __REDIRECT    *)
(*  macro, in order to support compilers that can do this some other      *)
(*  way.  When compilers don't support asm-names at all, we have to do    *)
(*  preprocessor tricks instead (which don't have exactly the right       *)
(*  semantics, but it's the best we can do).                              *)
(*                                                                        *)
(*  Example:                                                              *)
(*  int __REDIRECT(setpgrp, __P((__pid_t pid, __pid_t pgrp)), setpgid);   *)
(*  GCC has various useful declarations that can be made with the    *)
(*  `__attribute__' syntax.  All of the ways we use this do fine if  *)
(*  they are omitted for compilers that don't understand it.         *)

<* IF  __GEN_C__ THEN *>

(* H2D: this procedure corresponds to a macro. *)
PROCEDURE __attribute__ ( xyz: ARRAY OF SYSTEM.BYTE );
<* END *>

(*  It is possible to compile containing GCC extensions even if GCC is    *)
(*  run in pedantic mode if the uses are carefully marked using the       *)
(*  `__extension__' keyword.  But this is not generally available before  *)
(*  version 2.8.                                                          *)
(* # define __extension__		/* Ignore */ *)
(*  __restrict is known in EGCS 1.2 and above.  *)
(* # define __restrict	/* Ignore */ *)
(*  If we don't have __REDIRECT, prototypes will be missing if  *)
(*  __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64].            *)
(*  Decide whether we can define 'extern inline' functions in headers.   *)
(*  This is here only because every header file already includes this one.   *)
(*  Get the definitions of all the appropriate `__stub_FUNCTION' symbols.     *)
(*  <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a stub  *)
(*  which will always return failure (and set errno to ENOSYS).               *)
(*                                                                            *)
(*  We avoid including <gnu/stubs.h> when compiling the C library itself to   *)
(*  avoid a dependency loop.  stubs.h depends on every object file.  If       *)
(*  this #include were done for the library source code, then every object    *)
(*  file would depend on stubs.h.                                             *)
(*  This file is automatically generated.                    *)
(*  It defines a symbol `__stub_FUNCTION' for each function  *)
(*  in the C library which is a stub, meaning it will fail   *)
(*  every time called, usually setting errno to ENOSYS.      *)
(* #define __stub___kernel_cosl *)
(* #define __stub___kernel_sinl *)
(* #define __stub___kernel_tanl *)
(* #define __stub_chflags *)
(* #define __stub_erfcl *)
(* #define __stub_erfl *)
(* #define __stub_fattach *)
(* #define __stub_fchflags *)
(* #define __stub_fdetach *)
(* #define __stub_fexecve *)
(* #define __stub_getcontext *)
(* #define __stub_getmsg *)
(* #define __stub_getpmsg *)
(* #define __stub_gtty *)
(* #define __stub_j0l *)
(* #define __stub_j1l *)
(* #define __stub_jnl *)
(* #define __stub_lgammal *)
(* #define __stub_lgammal_r *)
(* #define __stub_madvise *)
(* #define __stub_makecontext *)
(* #define __stub_putmsg *)
(* #define __stub_putpmsg *)
(* #define __stub_revoke *)
(* #define __stub_setcontext *)
(* #define __stub_setlogin *)
(* #define __stub_sigreturn *)
(* #define __stub_sstk *)
(* #define __stub_stty *)
(* #define __stub_swapcontext *)
(* #define __stub_y0l *)
(* #define __stub_y1l *)
(* #define __stub_ynl *)
(*  Get the platform dependent bits of `poll'.   *)
(*  Copyright (C) 1997 Free Software Foundation, Inc.                          *)
(*  This file is part of the GNU C Library.                                    *)
(*                                                                             *)
(*  The GNU C Library is free software; you can redistribute it and/or         *)
(*  modify it under the terms of the GNU Library General Public License as     *)
(*  published by the Free Software Foundation; either version 2 of the         *)
(*  License, or (at your option) any later version.                            *)
(*                                                                             *)
(*  The GNU C Library is distributed in the hope that it will be useful,       *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of             *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU          *)
(*  Library General Public License for more details.                           *)
(*                                                                             *)
(*  You should have received a copy of the GNU Library General Public          *)
(*  License along with the GNU C Library; see the file COPYING.LIB.  If not,   *)
(*  write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,  *)
(*  Boston, MA 02111-1307, USA.                                                *)
(*  Event types that can be polled for.  These bits may be set in `events'  *)
(*  to indicate the interesting event types; they will appear in `revents'  *)
(*  to indicate the status of the file descriptor.                          *)

<* IF  __GEN_C__ THEN *>

VAR 
  POLLIN - : INTEGER;
  POLLPRI - : INTEGER;
  POLLOUT - : INTEGER;

<* ELSE *>

CONST 
  POLLIN = 1H;   (*  There is data to read.   *)
  POLLPRI = 2H;   (*  There is urgent data to read.   *)
  POLLOUT = 4H;   (*  Writing now will not block.   *)

<* END *>

(*  Event types always implicitly polled for.  These bits need not be set in  *)
(*  `events', but they will appear in `revents' to indicate the status of     *)
(*  the file descriptor.                                                      *)

<* IF  __GEN_C__ THEN *>

VAR 
  POLLERR - : INTEGER;
  POLLHUP - : INTEGER;
  POLLNVAL - : INTEGER;

<* ELSE *>

CONST 
  POLLERR = 8H;   (*  Error condition.   *)
  POLLHUP = 10H;   (*  Hung up.   *)
  POLLNVAL = 20H;   (*  Invalid polling request.   *)

<* END *>

(*  Canonical number of polling requests to read in at a time in poll.   *)

<* IF  __GEN_C__ THEN *>

VAR 
  NPOLLFILE - : INTEGER;

<* ELSE *>

CONST 
  NPOLLFILE = 30;

<* END *>

(*  Data structure describing a polling request.   *)

TYPE 
  pollfd = RECORD
    fd     : SYSTEM.int;    (*  File descriptor to poll.   *)
    events : SYSTEM.INT16;  (*  Types of events poller cares about.   *)
    revents: SYSTEM.INT16;  (*  Types of events that actually occurred.   *)
  END;

(*  Poll the file descriptors described by the NFDS structures starting at  *)
(*  FDS.  If TIMEOUT is nonzero and not -1, allow TIMEOUT milliseconds for  *)
(*  an event to occur; if TIMEOUT is -1, block until an event occurs.       *)
(*  Returns the number of file descriptors with events, zero if timed out,  *)
(*  or -1 for errors.                                                       *)

PROCEDURE __poll ( SEQ arg0: SYSTEM.BYTE ): SYSTEM.int;

PROCEDURE poll ( SEQ arg0: SYSTEM.BYTE ): SYSTEM.int;

END h2d_poll.
