(* h2d_termios.def  Nov 13  19:1:22  2001 *)
(* Generated by H2D v1.31.0 from termios.h. *)
<*+ M2ADDTYPES *>
<*+ M2EXTENSIONS *>
<*+ NOHEADER *> 
<* IF NOT DEFINED(GENTYPEDEF) THEN *> <* NEW GENTYPEDEF+ *> <* END *>
(* Merged headers: termios.h, features.h, sys/cdefs.h, gnu/stubs.h, bits/termios.h, 
sys/ttydefaults.h *)

DEFINITION MODULE ["C"] h2d_termios;

IMPORT SYSTEM;
(* H2D:  Required IMPORT clause: 
IMPORT h2d_termios;
*)

(*  Copyright (C) 1991, 92, 93, 94, 96, 97, 98 Free Software Foundation, Inc.  *)
(*  This file is part of the GNU C Library.                                    *)
(*                                                                             *)
(*  The GNU C Library is free software; you can redistribute it and/or         *)
(*  modify it under the terms of the GNU Library General Public License as     *)
(*  published by the Free Software Foundation; either version 2 of the         *)
(*  License, or (at your option) any later version.                            *)
(*                                                                             *)
(*  The GNU C Library is distributed in the hope that it will be useful,       *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of             *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU          *)
(*  Library General Public License for more details.                           *)
(*                                                                             *)
(*  You should have received a copy of the GNU Library General Public          *)
(*  License along with the GNU C Library; see the file COPYING.LIB.  If not,   *)
(*  write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,  *)
(*  Boston, MA 02111-1307, USA.                                                *)
(*                                                                  *)
(*  *	POSIX Standard: 7.1-2 General Terminal Interface	<termios.h>  *)
(*                                                                  *)

<* IF  __GEN_C__ THEN *>

VAR 
  _TERMIOS_H - : INTEGER;

<* ELSE *>

CONST 
  _TERMIOS_H = 1;

<* END *>

(*  Copyright (C) 1991, 92, 93, 95, 96, 97, 98 Free Software Foundation, Inc.  *)
(*  This file is part of the GNU C Library.                                    *)
(*                                                                             *)
(*  The GNU C Library is free software; you can redistribute it and/or         *)
(*  modify it under the terms of the GNU Library General Public License as     *)
(*  published by the Free Software Foundation; either version 2 of the         *)
(*  License, or (at your option) any later version.                            *)
(*                                                                             *)
(*  The GNU C Library is distributed in the hope that it will be useful,       *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of             *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU          *)
(*  Library General Public License for more details.                           *)
(*                                                                             *)
(*  You should have received a copy of the GNU Library General Public          *)
(*  License along with the GNU C Library; see the file COPYING.LIB.  If not,   *)
(*  write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,  *)
(*  Boston, MA 02111-1307, USA.                                                *)

<* IF  __GEN_C__ THEN *>

VAR 
  _FEATURES_H - : INTEGER;

<* ELSE *>

CONST 
  _FEATURES_H = 1;

<* END *>

(*    These are defined by the user (or the compiler)                          *)
(*    to specify the desired environment:                                      *)
(*                                                                             *)
(*    __STRICT_ANSI__	ISO Standard C.                                          *)
(*    _ISOC9X_SOURCE	Extensions to ISO C 89 from ISO C 9x.                     *)
(*    _POSIX_SOURCE	IEEE Std 1003.1.                                           *)
(*    _POSIX_C_SOURCE	If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std 1003.2;  *)
(* 			if >=199309L, add IEEE Std 1003.1b-1993;                                 *)
(* 			if >=199506L, add IEEE Std 1003.1c-1995                                  *)
(*    _XOPEN_SOURCE	Includes POSIX and XPG things.  Set to 500 if              *)
(* 			Single Unix conformance is wanted.                                       *)
(*    _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.            *)
(*    _LARGEFILE_SOURCE	Some more functions for correct standard I/O.          *)
(*    _LARGEFILE64_SOURCE	Additional functionality from LFS for large files.   *)
(*    _FILE_OFFSET_BITS=N	Select default filesystem interface.                 *)
(*    _BSD_SOURCE		ISO C, POSIX, and 4.3BSD things.                            *)
(*    _SVID_SOURCE		ISO C, POSIX, and SVID things.                             *)
(*    _GNU_SOURCE		All of the above, plus GNU extensions.                      *)
(*    _REENTRANT		Select additionally reentrant object.                        *)
(*    _THREAD_SAFE		Same as _REENTRANT, often used by other systems.           *)
(*                                                                             *)
(*    The `-ansi' switch to the GNU C compiler defines __STRICT_ANSI__.        *)
(*    If none of these are defined, the default is all but _GNU_SOURCE.        *)
(*    If more than one of these are defined, they accumulate.                  *)
(*    For example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE           *)
(*    together give you ISO C, 1003.1, and 1003.2, but nothing else.           *)
(*                                                                             *)
(*    These are defined by this file and are used by the                       *)
(*    header files to decide what to declare or define:                        *)
(*                                                                             *)
(*    __USE_ISOC9X		Define ISO C 9X things.                                    *)
(*    __USE_POSIX		Define IEEE Std 1003.1 things.                              *)
(*    __USE_POSIX2		Define IEEE Std 1003.2 things.                             *)
(*    __USE_POSIX199309	Define IEEE Std 1003.1, and .1b things.                *)
(*    __USE_POSIX199506	Define IEEE Std 1003.1, .1b, .1c and .1i things.       *)
(*    __USE_XOPEN		Define XPG things.                                          *)
(*    __USE_XOPEN_EXTENDED	Define X/Open Unix things.                          *)
(*    __USE_UNIX98		Define Single Unix V2 things.                              *)
(*    __USE_LARGEFILE64	Define LFS things with separate names.                 *)
(*    __USE_FILE_OFFSET64	Define 64bit interface as default.                   *)
(*    __USE_BSD		Define 4.3BSD things.                                         *)
(*    __USE_SVID		Define SVID things.                                          *)
(*    __USE_MISC		Define things common to BSD and System V Unix.               *)
(*    __USE_GNU		Define GNU extensions.                                        *)
(*    __USE_REENTRANT	Define reentrant/thread-safe *_r functions.              *)
(*    __FAVOR_BSD		Favor 4.3BSD things in cases of conflict.                   *)
(*                                                                             *)
(*    The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are     *)
(*    defined by this file unconditionally.  `__GNU_LIBRARY__' is provided     *)
(*    only for compatibility.  All new code should use the other symbols       *)
(*    to test for features.                                                    *)
(*                                                                             *)
(*    All macros listed above as possibly being defined by this file are       *)
(*    explicitly undefined if they are not explicitly defined.                 *)
(*    Feature-test macros that are not defined by the user or compiler         *)
(*    but are implied by the other feature-test macros defined (or by the      *)
(*    lack of any definitions) are defined by the file.                        *)
(*  Undefine everything, so we get a clean slate.   *)
(*  Suppress kernel-name space pollution unless user expressedly asks  *)
(*  for it.                                                            *)
(* # define __KERNEL_STRICT_NAMES *)
(*  Always use ISO C things.   *)

<* IF  __GEN_C__ THEN *>

VAR 
  __USE_ANSI - : INTEGER;

<* ELSE *>

CONST 
  __USE_ANSI = 1;

<* END *>

(*  If _BSD_SOURCE was defined by the user, favor BSD over POSIX.   *)
(*  If _GNU_SOURCE was defined by the user, turn on all the other features.   *)
(*  If nothing (other than _GNU_SOURCE) is defined,  *)
(*  define _BSD_SOURCE and _SVID_SOURCE.             *)

<* IF  __GEN_C__ THEN *>

VAR 
  _BSD_SOURCE - : INTEGER;
  _SVID_SOURCE - : INTEGER;

<* ELSE *>

CONST 
  _BSD_SOURCE = 1;
  _SVID_SOURCE = 1;

<* END *>

(*  This is to enable the ISO C 9x extension.  It will go away as soon  *)
(*  as this standard is officially released.                            *)
(*  If none of the ANSI/POSIX macros are defined, use POSIX.1 and POSIX.2  *)
(*  (and IEEE Std 1003.1b-1993 unless _XOPEN_SOURCE is defined).           *)

<* IF  __GEN_C__ THEN *>

VAR 
  _POSIX_SOURCE - : INTEGER;
  _POSIX_C_SOURCE - : INTEGER;
  __USE_POSIX - : INTEGER;
  __USE_POSIX2 - : INTEGER;
  __USE_POSIX199309 - : INTEGER;
  __USE_POSIX199506 - : INTEGER;
  __USE_MISC - : INTEGER;
  __USE_BSD - : INTEGER;
  __USE_SVID - : INTEGER;

<* ELSE *>

CONST 
  _POSIX_SOURCE = 1;
  _POSIX_C_SOURCE = 199506;
  __USE_POSIX = 1;
  __USE_POSIX2 = 1;
  __USE_POSIX199309 = 1;
  __USE_POSIX199506 = 1;
  __USE_MISC = 1;
  __USE_BSD = 1;
  __USE_SVID = 1;

<* END *>

(*  We do support the IEC 559 math functionality, real and complex.   *)

<* IF  __GEN_C__ THEN *>

VAR 
  __STDC_IEC_559__ - : INTEGER;
  __STDC_IEC_559_COMPLEX__ - : INTEGER;

<* ELSE *>

CONST 
  __STDC_IEC_559__ = 1;
  __STDC_IEC_559_COMPLEX__ = 1;

<* END *>

(*  This macro indicates that the installed library is the GNU C Library.  *)
(*  For historic reasons the value now is 6 and this will stay from now    *)
(*  on.  The use of this variable is deprecated.  Use __GLIBC__ and        *)
(*  __GLIBC_MINOR__ now (see below) when you want to test for a specific   *)
(*  GNU C library version and use the values in <gnu/lib-names.h> to get   *)
(*  the sonames of the shared libraries.                                   *)

<* IF  __GEN_C__ THEN *>

VAR 
  __GNU_LIBRARY__ - : INTEGER;

<* ELSE *>

CONST 
  __GNU_LIBRARY__ = 6;

<* END *>

(*  Major and minor version number of the GNU C library package.  Use  *)
(*  these macros to test for features in specific releases.            *)

<* IF  __GEN_C__ THEN *>

VAR 
  __GLIBC__ - : INTEGER;
  __GLIBC_MINOR__ - : INTEGER;

<* ELSE *>

CONST 
  __GLIBC__ = 2;
  __GLIBC_MINOR__ = 1;

<* END *>

(*  This is here only because every header file already includes this one.   *)
(*  Copyright (C) 1992,93,94,95,96,97,98,99 Free Software Foundation, Inc.     *)
(*  This file is part of the GNU C Library.                                    *)
(*                                                                             *)
(*  The GNU C Library is free software; you can redistribute it and/or         *)
(*  modify it under the terms of the GNU Library General Public License as     *)
(*  published by the Free Software Foundation; either version 2 of the         *)
(*  License, or (at your option) any later version.                            *)
(*                                                                             *)
(*  The GNU C Library is distributed in the hope that it will be useful,       *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of             *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU          *)
(*  Library General Public License for more details.                           *)
(*                                                                             *)
(*  You should have received a copy of the GNU Library General Public          *)
(*  License along with the GNU C Library; see the file COPYING.LIB.  If not,   *)
(*  write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,  *)
(*  Boston, MA 02111-1307, USA.                                                *)

<* IF  __GEN_C__ THEN *>

VAR 
  _SYS_CDEFS_H - : INTEGER;

<* ELSE *>

CONST 
  _SYS_CDEFS_H = 1;

<* END *>

(*  We are almost always included from features.h.  *)
(*  Some user header file might have defined this before.   *)
(* # define __inline		/* No inline functions.  */ *)

<* IF  __GEN_C__ THEN *>

(* H2D: this procedure corresponds to a macro. *)
PROCEDURE __P ( args: ARRAY OF SYSTEM.BYTE );

(* H2D: this procedure corresponds to a macro. *)
PROCEDURE __PMT ( args: ARRAY OF SYSTEM.BYTE );
<* END *>

(* #  define __const		/* No ANSI C keywords.  */ *)
(* #  define __signed *)
(* #  define __volatile *)
(* #  define __DOTS *)
(*  For these things, GCC behaves the ANSI way normally,  *)
(*  and the non-ANSI way under -traditional.              *)

<* IF  __GEN_C__ THEN *>

(* H2D: this procedure corresponds to a macro. *)
PROCEDURE __CONCAT ( x, y: ARRAY OF SYSTEM.BYTE );

(* H2D: this procedure corresponds to a macro. *)
PROCEDURE __STRING ( x: ARRAY OF SYSTEM.BYTE );
<* END *>

(* # define __ptr_t char * *)
(* # define __long_double_t  long double *)
(*  The BSD header files use the ANSI keywords unmodified (this means that   *)
(*  old programs may lose if they use the new keywords as identifiers), but  *)
(*  those names are not available under -traditional.  We define them to     *)
(*  their __ versions, which are taken care of above.                        *)
(*  C++ needs to know that types and declarations are C, not C++.   *)
(* # define __BEGIN_DECLS *)
(* # define __END_DECLS *)
(*  __asm__ ("xyz") is used throughout the headers to rename functions    *)
(*  at the assembly language level.  This is wrapped by the __REDIRECT    *)
(*  macro, in order to support compilers that can do this some other      *)
(*  way.  When compilers don't support asm-names at all, we have to do    *)
(*  preprocessor tricks instead (which don't have exactly the right       *)
(*  semantics, but it's the best we can do).                              *)
(*                                                                        *)
(*  Example:                                                              *)
(*  int __REDIRECT(setpgrp, __P((__pid_t pid, __pid_t pgrp)), setpgid);   *)
(*  GCC has various useful declarations that can be made with the    *)
(*  `__attribute__' syntax.  All of the ways we use this do fine if  *)
(*  they are omitted for compilers that don't understand it.         *)

<* IF  __GEN_C__ THEN *>

(* H2D: this procedure corresponds to a macro. *)
PROCEDURE __attribute__ ( xyz: ARRAY OF SYSTEM.BYTE );
<* END *>

(*  It is possible to compile containing GCC extensions even if GCC is    *)
(*  run in pedantic mode if the uses are carefully marked using the       *)
(*  `__extension__' keyword.  But this is not generally available before  *)
(*  version 2.8.                                                          *)
(* # define __extension__		/* Ignore */ *)
(*  __restrict is known in EGCS 1.2 and above.  *)
(* # define __restrict	/* Ignore */ *)
(*  If we don't have __REDIRECT, prototypes will be missing if  *)
(*  __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64].            *)
(*  Decide whether we can define 'extern inline' functions in headers.   *)
(*  This is here only because every header file already includes this one.   *)
(*  Get the definitions of all the appropriate `__stub_FUNCTION' symbols.     *)
(*  <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a stub  *)
(*  which will always return failure (and set errno to ENOSYS).               *)
(*                                                                            *)
(*  We avoid including <gnu/stubs.h> when compiling the C library itself to   *)
(*  avoid a dependency loop.  stubs.h depends on every object file.  If       *)
(*  this #include were done for the library source code, then every object    *)
(*  file would depend on stubs.h.                                             *)
(*  This file is automatically generated.                    *)
(*  It defines a symbol `__stub_FUNCTION' for each function  *)
(*  in the C library which is a stub, meaning it will fail   *)
(*  every time called, usually setting errno to ENOSYS.      *)
(* #define __stub___kernel_cosl *)
(* #define __stub___kernel_sinl *)
(* #define __stub___kernel_tanl *)
(* #define __stub_chflags *)
(* #define __stub_erfcl *)
(* #define __stub_erfl *)
(* #define __stub_fattach *)
(* #define __stub_fchflags *)
(* #define __stub_fdetach *)
(* #define __stub_fexecve *)
(* #define __stub_getcontext *)
(* #define __stub_getmsg *)
(* #define __stub_getpmsg *)
(* #define __stub_gtty *)
(* #define __stub_j0l *)
(* #define __stub_j1l *)
(* #define __stub_jnl *)
(* #define __stub_lgammal *)
(* #define __stub_lgammal_r *)
(* #define __stub_madvise *)
(* #define __stub_makecontext *)
(* #define __stub_putmsg *)
(* #define __stub_putpmsg *)
(* #define __stub_revoke *)
(* #define __stub_setcontext *)
(* #define __stub_setlogin *)
(* #define __stub_sigreturn *)
(* #define __stub_sstk *)
(* #define __stub_stty *)
(* #define __stub_swapcontext *)
(* #define __stub_y0l *)
(* #define __stub_y1l *)
(* #define __stub_ynl *)
(*  Get the system-dependent definitions of `struct termios', `tcflag_t',  *)
(*  `cc_t', `speed_t', and all the macros specifying the flag bits.        *)
(*  termios type and macro definitions.  Linux version.                        *)
(*  Copyright (C) 1993, 94, 95, 96, 97, 98, 99 Free Software Foundation, Inc.  *)
(*  This file is part of the GNU C Library.                                    *)
(*                                                                             *)
(*  The GNU C Library is free software; you can redistribute it and/or         *)
(*  modify it under the terms of the GNU Library General Public License as     *)
(*  published by the Free Software Foundation; either version 2 of the         *)
(*  License, or (at your option) any later version.                            *)
(*                                                                             *)
(*  The GNU C Library is distributed in the hope that it will be useful,       *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of             *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU          *)
(*  Library General Public License for more details.                           *)
(*                                                                             *)
(*  You should have received a copy of the GNU Library General Public          *)
(*  License along with the GNU C Library; see the file COPYING.LIB.  If not,   *)
(*  write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,  *)
(*  Boston, MA 02111-1307, USA.                                                *)

TYPE 
  cc_t = SHORTCARD;

  speed_t = SYSTEM.unsigned;

  tcflag_t = SYSTEM.unsigned;

<* IF  __GEN_C__ THEN *>

VAR 
  NCCS - : INTEGER;

<* ELSE *>

CONST 
  NCCS = 32;

<* END *>

TYPE 
  termios = RECORD
    c_iflag : tcflag_t;                   (*  input mode flags  *)
    c_oflag : tcflag_t;                   (*  output mode flags  *)
    c_cflag : tcflag_t;                   (*  control mode flags  *)
    c_lflag : tcflag_t;                   (*  local mode flags  *)
    c_line  : cc_t;                       (*  line discipline  *)
    c_cc    : ARRAY [0..NCCS-1] OF cc_t;  (*  control characters  *)
    c_ispeed: speed_t;                    (*  input speed  *)
    c_ospeed: speed_t;                    (*  output speed  *)
  END;

(*  c_cc characters  *)

<* IF  __GEN_C__ THEN *>

VAR 
  VINTR - : INTEGER;
  VQUIT - : INTEGER;
  VERASE - : INTEGER;
  VKILL - : INTEGER;
  VEOF - : INTEGER;
  VTIME - : INTEGER;
  VMIN - : INTEGER;
  VSWTC - : INTEGER;
  VSTART - : INTEGER;
  VSTOP - : INTEGER;
  VSUSP - : INTEGER;
  VEOL - : INTEGER;
  VREPRINT - : INTEGER;
  VDISCARD - : INTEGER;
  VWERASE - : INTEGER;
  VLNEXT - : INTEGER;
  VEOL2 - : INTEGER;

<* ELSE *>

CONST 
  VINTR = 0;
  VQUIT = 1;
  VERASE = 2;
  VKILL = 3;
  VEOF = 4;
  VTIME = 5;
  VMIN = 6;
  VSWTC = 7;
  VSTART = 8;
  VSTOP = 9;
  VSUSP = 10;
  VEOL = 11;
  VREPRINT = 12;
  VDISCARD = 13;
  VWERASE = 14;
  VLNEXT = 15;
  VEOL2 = 16;

<* END *>

(*  c_iflag bits  *)

<* IF  __GEN_C__ THEN *>

VAR 
  IGNBRK - : INTEGER;
  BRKINT - : INTEGER;
  IGNPAR - : INTEGER;
  PARMRK - : INTEGER;
  INPCK - : INTEGER;
  ISTRIP - : INTEGER;
  INLCR - : INTEGER;
  IGNCR - : INTEGER;
  ICRNL - : INTEGER;
  IUCLC - : INTEGER;
  IXON - : INTEGER;
  IXANY - : INTEGER;
  IXOFF - : INTEGER;
  IMAXBEL - : INTEGER;

<* ELSE *>

CONST 
  IGNBRK = 1;
  BRKINT = 2;
  IGNPAR = 4;
  PARMRK = 8;
  INPCK = 16;
  ISTRIP = 32;
  INLCR = 64;
  IGNCR = 128;
  ICRNL = 256;
  IUCLC = 512;
  IXON = 1024;
  IXANY = 2048;
  IXOFF = 4096;
  IMAXBEL = 8192;

<* END *>

(*  c_oflag bits  *)

<* IF  __GEN_C__ THEN *>

VAR 
  OPOST - : INTEGER;
  OLCUC - : INTEGER;
  ONLCR - : INTEGER;
  OCRNL - : INTEGER;
  ONOCR - : INTEGER;
  ONLRET - : INTEGER;
  OFILL - : INTEGER;
  OFDEL - : INTEGER;
  NLDLY - : INTEGER;
  NL0 - : INTEGER;
  NL1 - : INTEGER;
  CRDLY - : INTEGER;
  CR0 - : INTEGER;
  CR1 - : INTEGER;
  CR2 - : INTEGER;
  CR3 - : INTEGER;
  TABDLY - : INTEGER;
  TAB0 - : INTEGER;
  TAB1 - : INTEGER;
  TAB2 - : INTEGER;
  TAB3 - : INTEGER;
  BSDLY - : INTEGER;
  BS0 - : INTEGER;
  BS1 - : INTEGER;
  FFDLY - : INTEGER;
  FF0 - : INTEGER;
  FF1 - : INTEGER;
  VTDLY - : INTEGER;
  VT0 - : INTEGER;
  VT1 - : INTEGER;
  XTABS - : INTEGER;

<* ELSE *>

CONST 
  OPOST = 1;
  OLCUC = 2;
  ONLCR = 4;
  OCRNL = 8;
  ONOCR = 16;
  ONLRET = 32;
  OFILL = 64;
  OFDEL = 128;
  NLDLY = 256;
  NL0 = 0;
  NL1 = 256;
  CRDLY = 1536;
  CR0 = 0;
  CR1 = 512;
  CR2 = 1024;
  CR3 = 1536;
  TABDLY = 6144;
  TAB0 = 0;
  TAB1 = 2048;
  TAB2 = 4096;
  TAB3 = 6144;
  BSDLY = 8192;
  BS0 = 0;
  BS1 = 8192;
  FFDLY = 32768;
  FF0 = 0;
  FF1 = 32768;
  VTDLY = 16384;
  VT0 = 0;
  VT1 = 16384;
  XTABS = 6144;

<* END *>

(*  c_cflag bit meaning  *)

<* IF  __GEN_C__ THEN *>

VAR 
  CBAUD - : INTEGER;
  B0 - : INTEGER;
  B50 - : INTEGER;
  B75 - : INTEGER;
  B110 - : INTEGER;
  B134 - : INTEGER;
  B150 - : INTEGER;
  B200 - : INTEGER;
  B300 - : INTEGER;
  B600 - : INTEGER;
  B1200 - : INTEGER;
  B1800 - : INTEGER;
  B2400 - : INTEGER;
  B4800 - : INTEGER;
  B9600 - : INTEGER;
  B19200 - : INTEGER;
  B38400 - : INTEGER;
  CSIZE - : INTEGER;
  CS5 - : INTEGER;
  CS6 - : INTEGER;
  CS7 - : INTEGER;
  CS8 - : INTEGER;
  CSTOPB - : INTEGER;
  CREAD - : INTEGER;
  PARENB - : INTEGER;
  PARODD - : INTEGER;
  HUPCL - : INTEGER;
  CLOCAL - : INTEGER;
  CBAUDEX - : INTEGER;
  B57600 - : INTEGER;
  B115200 - : INTEGER;
  B230400 - : INTEGER;
  B460800 - : INTEGER;
  B500000 - : INTEGER;
  B576000 - : INTEGER;
  B921600 - : INTEGER;
  B1000000 - : INTEGER;
  B1152000 - : INTEGER;
  B1500000 - : INTEGER;
  B2000000 - : INTEGER;
  B2500000 - : INTEGER;
  B3000000 - : INTEGER;
  B3500000 - : INTEGER;
  B4000000 - : INTEGER;
  CIBAUD - : INTEGER;
  CRTSCTS - : INTEGER;

<* ELSE *>

CONST 
  CBAUD = 4111;
  B0 = 0;   (*  hang up  *)
  B50 = 1;
  B75 = 2;
  B110 = 3;
  B134 = 4;
  B150 = 5;
  B200 = 6;
  B300 = 7;
  B600 = 8;
  B1200 = 9;
  B1800 = 10;
  B2400 = 11;
  B4800 = 12;
  B9600 = 13;
  B19200 = 14;
  EXTA = B19200;
  B38400 = 15;
  EXTB = B38400;
  CSIZE = 48;
  CS5 = 0;
  CS6 = 16;
  CS7 = 32;
  CS8 = 48;
  CSTOPB = 64;
  CREAD = 128;
  PARENB = 256;
  PARODD = 512;
  HUPCL = 1024;
  CLOCAL = 2048;
  CBAUDEX = 4096;
  B57600 = 4097;
  B115200 = 4098;
  B230400 = 4099;
  B460800 = 4100;
  B500000 = 4101;
  B576000 = 4102;
  B921600 = 4103;
  B1000000 = 4104;
  B1152000 = 4105;
  B1500000 = 4106;
  B2000000 = 4107;
  B2500000 = 4108;
  B3000000 = 4109;
  B3500000 = 4110;
  B4000000 = 4111;
  CIBAUD = 269418496;   (*  input baud rate (not used)  *)
  CRTSCTS = 153;   (*  flow control  *)

<* END *>

(*  c_lflag bits  *)

<* IF  __GEN_C__ THEN *>

VAR 
  ISIG - : INTEGER;
  ICANON - : INTEGER;
  XCASE - : INTEGER;
  ECHO - : INTEGER;
  ECHOE - : INTEGER;
  ECHOK - : INTEGER;
  ECHONL - : INTEGER;
  NOFLSH - : INTEGER;
  TOSTOP - : INTEGER;
  ECHOCTL - : INTEGER;
  ECHOPRT - : INTEGER;
  ECHOKE - : INTEGER;
  FLUSHO - : INTEGER;
  PENDIN - : INTEGER;
  IEXTEN - : INTEGER;

<* ELSE *>

CONST 
  ISIG = 1;
  ICANON = 2;
  XCASE = 4;
  ECHO = 8;
  ECHOE = 16;
  ECHOK = 32;
  ECHONL = 64;
  NOFLSH = 128;
  TOSTOP = 256;
  ECHOCTL = 512;
  ECHOPRT = 1024;
  ECHOKE = 2048;
  FLUSHO = 4096;
  PENDIN = 16384;
  IEXTEN = 32768;

<* END *>

(*  tcflow() and TCXONC use these  *)

<* IF  __GEN_C__ THEN *>

VAR 
  TCOOFF - : INTEGER;
  TCOON - : INTEGER;
  TCIOFF - : INTEGER;
  TCION - : INTEGER;

<* ELSE *>

CONST 
  TCOOFF = 0;
  TCOON = 1;
  TCIOFF = 2;
  TCION = 3;

<* END *>

(*  tcflush() and TCFLSH use these  *)

<* IF  __GEN_C__ THEN *>

VAR 
  TCIFLUSH - : INTEGER;
  TCOFLUSH - : INTEGER;
  TCIOFLUSH - : INTEGER;

<* ELSE *>

CONST 
  TCIFLUSH = 0;
  TCOFLUSH = 1;
  TCIOFLUSH = 2;

<* END *>

(*  tcsetattr uses these  *)

<* IF  __GEN_C__ THEN *>

VAR 
  TCSANOW - : INTEGER;
  TCSADRAIN - : INTEGER;
  TCSAFLUSH - : INTEGER;

<* ELSE *>

CONST 
  TCSANOW = 0;
  TCSADRAIN = 1;
  TCSAFLUSH = 2;

<* END *>

(* #define _IOT_termios /* Hurd ioctl type field.  */ \  _IOT (_IOTS (cflag_t), 4, _IOTS (cc_t), NCCS, _IOTS (speed_t), 2) *)
(*  Compare a character C to a value VAL from the `c_cc' array in a             *)
(*  `struct termios'.  If VAL is _POSIX_VDISABLE, no character can match it.    *)

<* IF  __GEN_C__ THEN *>

(* H2D: this procedure corresponds to a macro. *)
PROCEDURE CCEQ ( val, c: ARRAY OF SYSTEM.BYTE );
<* END *>

(*  Return the output baud rate stored in *TERMIOS_P.   *)

PROCEDURE cfgetospeed ( SEQ arg0: SYSTEM.BYTE ): speed_t;

(*  Return the input baud rate stored in *TERMIOS_P.   *)

PROCEDURE cfgetispeed ( SEQ arg0: SYSTEM.BYTE ): speed_t;

(*  Set the output baud rate stored in *TERMIOS_P to SPEED.   *)

PROCEDURE cfsetospeed ( SEQ arg0: SYSTEM.BYTE ): SYSTEM.int;

(*  Set the input baud rate stored in *TERMIOS_P to SPEED.   *)

PROCEDURE cfsetispeed ( SEQ arg0: SYSTEM.BYTE ): SYSTEM.int;

(*  Set both the input and output baud rates in *TERMIOS_OP to SPEED.   *)

PROCEDURE cfsetspeed ( SEQ arg0: SYSTEM.BYTE ): SYSTEM.int;

(*  Put the state of FD into *TERMIOS_P.   *)

PROCEDURE tcgetattr ( SEQ arg0: SYSTEM.BYTE ): SYSTEM.int;

(*  Set the state of FD to *TERMIOS_P.                              *)
(*  Values for OPTIONAL_ACTIONS (TCSA* ) are in <bits/termios.h>.    *)

PROCEDURE tcsetattr ( SEQ arg0: SYSTEM.BYTE ): SYSTEM.int;

(*  Set *TERMIOS_P to indicate raw mode.   *)

PROCEDURE cfmakeraw ( SEQ arg0: SYSTEM.BYTE );

(*  Send zero bits on FD.   *)

PROCEDURE tcsendbreak ( SEQ arg0: SYSTEM.BYTE ): SYSTEM.int;

(*  Wait for pending output to be written on FD.   *)

PROCEDURE tcdrain ( SEQ arg0: SYSTEM.BYTE ): SYSTEM.int;

(*  Flush pending data on FD.                                               *)
(*  Values for QUEUE_SELECTOR (TC{I,O,IO}FLUSH) are in <bits/termios.h>.    *)

PROCEDURE tcflush ( SEQ arg0: SYSTEM.BYTE ): SYSTEM.int;

(*  Suspend or restart transmission on FD.                         *)
(*  Values for ACTION (TC[IO]{OFF,ON}) are in <bits/termios.h>.    *)

PROCEDURE tcflow ( SEQ arg0: SYSTEM.BYTE ): SYSTEM.int;

(*   -                                                                            *)
(*  * Copyright (c) 1982, 1986, 1993                                              *)
(*  *	The Regents of the University of California.  All rights reserved.          *)
(*  * (c) UNIX System Laboratories, Inc.                                          *)
(*  * All or some portions of this file are derived from material licensed        *)
(*  * to the University of California by American Telephone and Telegraph         *)
(*  * Co. or Unix System Laboratories, Inc. and are reproduced herein with        *)
(*  * the permission of UNIX System Laboratories, Inc.                            *)
(*  *                                                                             *)
(*  * Redistribution and use in source and binary forms, with or without          *)
(*  * modification, are permitted provided that the following conditions          *)
(*  * are met:                                                                    *)
(*  * 1. Redistributions of source code must retain the above copyright           *)
(*  *    notice, this list of conditions and the following disclaimer.            *)
(*  * 2. Redistributions in binary form must reproduce the above copyright        *)
(*  *    notice, this list of conditions and the following disclaimer in the      *)
(*  *    documentation and/or other materials provided with the distribution.     *)
(*  * 3. All advertising materials mentioning features or use of this software    *)
(*  *    must display the following acknowledgement:                              *)
(*  *	This product includes software developed by the University of               *)
(*  *	California, Berkeley and its contributors.                                  *)
(*  * 4. Neither the name of the University nor the names of its contributors     *)
(*  *    may be used to endorse or promote products derived from this software    *)
(*  *    without specific prior written permission.                               *)
(*  *                                                                             *)
(*  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND     *)
(*  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE       *)
(*  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  *)
(*  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE    *)
(*  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  *)
(*  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS     *)
(*  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)       *)
(*  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  *)
(*  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY   *)
(*  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF      *)
(*  * SUCH DAMAGE.                                                                *)
(*  *                                                                             *)
(*  *	@(#)ttydefaults.h	8.4 (Berkeley) 1/21/94                                    *)
(*                                                                                *)
(*                                                              *)
(*  * System wide defaults for terminal state.  Linux version.  *)
(*                                                              *)
(* #define	_SYS_TTYDEFAULTS_H_ *)
(*                               *)
(*  * Defaults on "first" open.  *)
(*                               *)

<* IF  __GEN_C__ THEN *>

VAR 
  TTYDEF_IFLAG - : INTEGER;
  TTYDEF_OFLAG - : INTEGER;
  TTYDEF_LFLAG - : INTEGER;
  TTYDEF_CFLAG - : INTEGER;
  TTYDEF_SPEED - : INTEGER;

<* ELSE *>

CONST 
  TTYDEF_IFLAG = 11554;
  TTYDEF_OFLAG = 6149;
  TTYDEF_LFLAG = 35355;
  TTYDEF_CFLAG = 1440;
  TTYDEF_SPEED = B9600;

<* END *>

(*                                *)
(*  * Control Character Defaults  *)
(*                                *)

<* IF  __GEN_C__ THEN *>

(* H2D: this procedure corresponds to a macro. *)
PROCEDURE CTRL ( x: ARRAY OF SYSTEM.BYTE );
<* END *>

(* #define	CEOF		CTRL('d') *)

<* IF  __GEN_C__ THEN *>

VAR 
  CEOL - : CHAR;
  CERASE - : INTEGER;

<* ELSE *>

CONST 
  CEOL = '';   (*  XXX avoid _POSIX_VDISABLE  *)
  CBRK = CEOL;
  CERASE = 127;

<* END *>

(* #define	CINTR		CTRL('c') *)

<* IF  __GEN_C__ THEN *>

VAR 
  CSTATUS - : CHAR;

<* ELSE *>

CONST 
  CSTATUS = '';   (*  XXX avoid _POSIX_VDISABLE  *)

<* END *>

(* #define	CKILL		CTRL('u') *)

<* IF  __GEN_C__ THEN *>

VAR 
  CMIN - : INTEGER;
  CQUIT - : INTEGER;

<* ELSE *>

CONST 
  CMIN = 1;
  CQUIT = 28;   (*  FS, ^\  *)

<* END *>

(* #define	CSUSP		CTRL('z') *)

<* IF  __GEN_C__ THEN *>

VAR 
  CTIME - : INTEGER;

<* ELSE *>

CONST 
  CTIME = 0;

<* END *>

(* #define	CDSUSP		CTRL('y') *)
(* #define	CSTART		CTRL('q') *)
(* #define	CSTOP		CTRL('s') *)
(* #define	CLNEXT		CTRL('v') *)
(* #define	CDISCARD 	CTRL('o') *)
(* #define	CWERASE 	CTRL('w') *)
(* #define	CREPRINT 	CTRL('r') *)
(*  compat  *)
(*  PROTECTED INCLUSION ENDS HERE  *)
(*                                                                            *)
(*  * #define TTYDEFCHARS to include an array of default control characters.  *)
(*                                                                            *)

END h2d_termios.
