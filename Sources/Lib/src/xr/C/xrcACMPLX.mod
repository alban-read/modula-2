<*- checkindex  *>
<*- checkdindex *>
<*- checknil    *>
<*- checkset    *>
<*- checkrange  *>
<*- ioverflow   *>
<*- coverflow   *>
<*- foverflow   *>
<*- gendebug    *> (* Don enable! History would not work (SYSTEM.CODE) *)
IMPLEMENTATION MODULE xrcACMPLX;

FROM SYSTEM    IMPORT  int;
IMPORT  X2C, M2EXCEPTION;

PROCEDURE [2] CPLX_CMP(x,y: COMPLEX): int;
BEGIN
  IF (RE(x)=RE(y)) & (IM(x)=IM(y)) THEN RETURN 0 END;
  RETURN 1;
END CPLX_CMP;

PROCEDURE [2] CPLX_ADD(x,y: COMPLEX): COMPLEX;
BEGIN
  RETURN CMPLX(RE(x)+RE(y),IM(x)+IM(y));
END CPLX_ADD;

PROCEDURE [2] CPLX_SUB(x,y: COMPLEX): COMPLEX;
BEGIN
  RETURN CMPLX(RE(x)-RE(y),IM(x)-IM(y));
END CPLX_SUB;

PROCEDURE [2] CPLX_MUL(x,y: COMPLEX): COMPLEX;
BEGIN
  RETURN CMPLX(RE(x)*RE(y)-IM(x)*IM(y),RE(x)*IM(y)+IM(x)*RE(y));
END CPLX_MUL;

PROCEDURE [2] CPLX_DIV(x,y: COMPLEX): COMPLEX;
  VAR d: REAL;
BEGIN
  d:=RE(y)*RE(y)+IM(y)*IM(y);
  IF d=0.0 THEN X2C.X2C_TRAP(ORD(M2EXCEPTION.complexDivException)) END;
  RETURN CMPLX((RE(x)*RE(y)+IM(x)*IM(y))/d,(IM(x)*RE(y)-RE(x)*IM(y))/d);
END CPLX_DIV;

PROCEDURE [2] CPLX_NEG(x: COMPLEX): COMPLEX;
BEGIN
  RETURN CMPLX(-RE(x),-IM(x))
END CPLX_NEG;

PROCEDURE [2] CPLX_LCMP(x,y: LONGCOMPLEX): int;
BEGIN
  IF (RE(x)=RE(y)) & (IM(x)=IM(y)) THEN RETURN 0 END;
  RETURN 1;
END CPLX_LCMP;

PROCEDURE [2] CPLX_LADD(x,y: LONGCOMPLEX): LONGCOMPLEX;
BEGIN
  RETURN CMPLX(RE(x)+RE(y),IM(x)+IM(y));
END CPLX_LADD;

PROCEDURE [2] CPLX_LSUB(x,y: LONGCOMPLEX): LONGCOMPLEX;
BEGIN
  RETURN CMPLX(RE(x)-RE(y),IM(x)-IM(y));
END CPLX_LSUB;

PROCEDURE [2] CPLX_LMUL(x,y: LONGCOMPLEX): LONGCOMPLEX;
BEGIN
  RETURN CMPLX(RE(x)*RE(y)-IM(x)*IM(y),RE(x)*IM(y)+IM(x)*RE(y));
END CPLX_LMUL;

PROCEDURE [2] CPLX_LDIV(x,y: LONGCOMPLEX): LONGCOMPLEX;
  VAR d: LONGREAL;
BEGIN
  d:=RE(y)*RE(y)+IM(y)*IM(y);
  IF d=0.0 THEN X2C.X2C_TRAP(ORD(M2EXCEPTION.complexDivException)) END;
  RETURN CMPLX((RE(x)*RE(y)+IM(x)*IM(y))/d,(IM(x)*RE(y)-RE(x)*IM(y))/d);
END CPLX_LDIV;

PROCEDURE [2] CPLX_LNEG(x: LONGCOMPLEX): LONGCOMPLEX;
BEGIN
  RETURN CMPLX(-RE(x),-IM(x));
END CPLX_LNEG;

PROCEDURE [2] CPLX_L(x: COMPLEX): LONGCOMPLEX;
BEGIN
  RETURN CMPLX(VAL(LONGREAL,RE(x)),VAL(LONGREAL,IM(x)));
END CPLX_L;



END xrcACMPLX.
