<*+ M2EXTENSIONS *>

DEFINITION MODULE ["C"] xrnMman; (* Shell *)

(* mman.h *)
IMPORT SYSTEM;

FROM SYSTEM IMPORT ADDRESS;

CONST
(* Protections are chosen from these bits, OR'd together.  The
   implementation does not necessarily support PROT_EXEC or PROT_WRITE
   without PROT_READ.  The only guarantees are that no writing will be
   allowed without PROT_WRITE and no access will be allowed for PROT_NONE. *)

    PROT_NONE		= 00h;		-- Page can not be accessed.
    PROT_READ		= 01h;		-- Page can be read.
    PROT_WRITE		= 02h;		-- Page can be written.
    PROT_EXEC		= 04h;		-- Page can be executed.

(* Sharing types (must choose one and only one of these).  *)
    MAP_SHARED		= 01h;		-- Share changes.
    MAP_PRIVATE		= 02h;		-- Changes are private.
    MAP_TYPE		= 0fh;		-- Mask for type of mapping.

(* Other flags.  *)
    MAP_FIXED		= 10h;		-- Interpret addr exactly.
    MAP_FILE		= 0;
    MAP_ANONYMOUS 	= 020h;		-- Don't use a file.
    MAP_ANON		= MAP_ANONYMOUS;

(* These are Linux-specific.  *)
    MAP_GROWSDOWN	= 00100h;	-- Stack-like segment.
    MAP_DENYWRITE	= 00800h;	-- ETXTBSY
    MAP_EXECUTABLE	= 01000h;	-- Mark it as an executable.
    MAP_LOCKED		= 02000h;	-- Lock the mapping.
    MAP_NORESERVE	= 04000h;	-- Don't check for reservations.

TYPE
  INT32 = SYSTEM.INT32;


PROCEDURE mmap(addr: ADDRESS; size, prot, flags: CARDINAL; fd: INT32; offset: CARDINAL): ADDRESS;
PROCEDURE munmap(addr: ADDRESS; size: CARDINAL): INT32;
PROCEDURE mprotect(addr: ADDRESS; len, prot: CARDINAL): INT32;


END xrnMman.
