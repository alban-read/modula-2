(* Copyright (c) XDS 1996,98.  All Rights Reserved *)
(*
 * XDS library.
 * Interface of XDS libraries to threads features of underlying OS.
 *)

<* +M2EXTENSIONS *>

DEFINITION MODULE ["C"] xosThreads; (* Hady. 10.07.96 11:04 *)

IMPORT  SYSTEM;

TYPE
  X2C_Thread;       (* System dependent thread Id *)
  X2C_BSemaphore;   (* System dependent semaphore Id *)
  X2C_Semaphore;    (* System dependent semaphore Id *)
  X2C_Mutex;
  X2C_Key;
  X2C_THREAD_PROC = PROCEDURE (SYSTEM.ADDRESS);
  X2C_EventSource = SYSTEM.CARD32;
(* Note that MUTEXes may be implemented as a semaphores;
   they defined separately to accomodate light-weight
   syncronisation mechanism of the system (CRITICAL_SECTION in Win32) *)

PROCEDURE X2C_INIT_THREADS(): SYSTEM.INT32;

PROCEDURE X2C_CurrentThread(): X2C_Thread;
PROCEDURE X2C_MyThreadHandle(VAR h: X2C_Thread): SYSTEM.INT32;

PROCEDURE X2C_GetThreadWord(VAR w: SYSTEM.ADDRESS): SYSTEM.INT32;
PROCEDURE X2C_SetThreadWord(w: SYSTEM.ADDRESS): SYSTEM.INT32;

PROCEDURE X2C_GetMyThreadId(VAR id: SYSTEM.CARD32);

PROCEDURE X2C_CreateThread(VAR t: X2C_Thread;
                            proc: X2C_THREAD_PROC;
                           stack: SYSTEM.CARD32;
                           param: SYSTEM.ADDRESS;
                            prio: SYSTEM.INT32): SYSTEM.INT32;
PROCEDURE X2C_DeleteThread(VAR t: X2C_Thread): SYSTEM.INT32;
PROCEDURE X2C_SuspendThread(t: X2C_Thread): SYSTEM.INT32;
PROCEDURE X2C_ResumeThread (t: X2C_Thread): SYSTEM.INT32;
PROCEDURE X2C_ExitThread();
PROCEDURE X2C_ScheduleMyThread();
PROCEDURE X2C_GetThreadPriority(t: X2C_Thread; VAR prio: SYSTEM.INT32): SYSTEM.INT32;
PROCEDURE X2C_SetThreadPriority(t: X2C_Thread; prio: SYSTEM.INT32): SYSTEM.INT32;

PROCEDURE X2C_CreateMutex(VAR m: X2C_Mutex): SYSTEM.INT32;
PROCEDURE X2C_DeleteMutex(VAR m: X2C_Mutex): SYSTEM.INT32;
PROCEDURE X2C_EnterMutex(m: X2C_Mutex): SYSTEM.INT32;
PROCEDURE X2C_ExitMutex(m: X2C_Mutex): SYSTEM.INT32;

PROCEDURE X2C_CreateBoolSemaphore  (VAR m: X2C_BSemaphore) :SYSTEM.INT32;
PROCEDURE X2C_DeleteBoolSemaphore  (VAR m: X2C_BSemaphore) :SYSTEM.INT32;
PROCEDURE X2C_AcquireBoolSemaphore (m :X2C_BSemaphore) :SYSTEM.INT32;

PROCEDURE X2C_ResetBoolSemaphore (m: X2C_BSemaphore) :SYSTEM.INT32;
(* set in blocked state *) 

PROCEDURE X2C_SetBoolSemaphore (m: X2C_BSemaphore) :SYSTEM.INT32;
(* set in signaled state *) 

PROCEDURE X2C_CreateSemaphore(VAR m: X2C_Semaphore; init, max: SYSTEM.INT32): SYSTEM.INT32;
PROCEDURE X2C_DeleteSemaphore(VAR m: X2C_Semaphore): SYSTEM.INT32;
PROCEDURE X2C_AcquireSemaphore(m: X2C_Semaphore; nowait: BOOLEAN; VAR awaited: BOOLEAN): SYSTEM.INT32;
PROCEDURE X2C_ReleaseSemaphore(m: X2C_Semaphore): SYSTEM.INT32;

PROCEDURE X2C_SemaphoreToEvent(m: X2C_BSemaphore): X2C_EventSource;

PROCEDURE X2C_WaitEvents(s: ARRAY OF X2C_EventSource; no: CARDINAL): SYSTEM.INT32;

PROCEDURE X2C_CreateKey(VAR key: X2C_Key): SYSTEM.INT32;
PROCEDURE X2C_DeleteKey(key: X2C_Key): SYSTEM.INT32;
PROCEDURE X2C_SetKeyValue(key: X2C_Key; value: SYSTEM.ADDRESS): SYSTEM.INT32;
PROCEDURE X2C_GetKeyValue(key: X2C_Key; VAR value: SYSTEM.ADDRESS): SYSTEM.INT32;

PROCEDURE X2C_SyncThreadState(thr: X2C_Thread;
                      VAR stk_end: SYSTEM.ADDRESS;
                         reg_dump: SYSTEM.ADDRESS;
                         dmp_size: SYSTEM.CARD32;
                    VAR reg_dsize: SYSTEM.CARD32): SYSTEM.INT32;

END xosThreads.
